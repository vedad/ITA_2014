%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: cornu.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Viggo Hansteen
%%CreationDate: 5/10/11
%%BoundingBox: 0 0 237 240
%%HiResBoundingBox: 0 0 236.4282 239.7881
%%CropBox: 0 0 236.4282 239.7881
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 10918 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD05FF52A8FFFFA97D52A8FFA8527E7D7D53527D7D7D7E52FD057D%52A87D7D7D527D7D7D7E53FD057D52FD057D527E7D7D7D52FD047D52FD05%7D52FD047D5252847D7D7D527D7D7D7E52FD057D52FD057D53FD047D52FD%047D52FD057D52FD047D52537D7D7D52A8FD08FF7D7EFFFFA8A8FF53FF7D%A8FD04FFA8FD0AFFA8FD04FFA8FD04FFA97DFD04FFA8FD04FFA8FD05FFA8%FD05FFA8FD04FF7DFD04FFA8FD05FFA8FD0AFFA8FD04FF7DAFFD04FFA8FD%04FFA8FD0AFFA8FD04FFA87DFD08FF7DA8FFFF7DA8FF7DFFA8A8FD19FFA8%A8FD1AFF7DFD1AFFA8A8FD19FFA87EFD08FFA87DFF7DA8527D7DFF7DA8FD%2EFFA8FD3CFFA87DFD0BFFA8FFFFA8FFFFA8A8FD2CFFA8AFFFA8A8FD04FF%A8FD35FFA8A8FD11FF7DA8FD2CFF527DFF527DFD3AFFA87DFD11FF8453FD%2CFFA859FF52FD05FFA8FD35FF5284FD11FF7DA8FD2CFFA87D527DFD04FF%A8A8FD35FFA87DFD11FFA8A8FD2DFF7D27A8FD05FFA8FD35FFA8A8FD11FF%7DA8FD2DFFA87DFD05FFA8A8FD14FF7DA8FFFFFF7D7DFD1AFFA87DFD11FF%A8A8FD35FFA8FD14FF7D52FFFFA853FD1BFFA87EFD11FF7DA8FD34FFA8A8%FD14FFA87DFFFF7D5284FD1AFFA87DFD11FFA87DFD4BFF53FD04FF53A8FD%19FF7D7EFD11FF7DAFFD35FFA8FD14FFA87DFFFD047DFD1BFF7DFD11FFA8%A8FD4FFFA8FD1BFFA8A8FD11FF7DA8FD34FFA8A8FD35FFA87DFD11FFA8A8%FD4BFFAFA8FFFFA8FD1BFFA8A8FD11FF7D7DFD34FFA8A8FD16FF7D7D5252%7D52277D7D7D597DA8FD12FF7D7DFD11FFA87DFD4CFFA82752AFFFA8A853%FF7D52527EFD12FF7D7DFD11FF7DA8FD34FFA8A8FD14FFA87D27A87DA8FF%FF847DFFA852A87D7DA8FD10FFA87DFD11FFA8A8FD4AFF7DA8FD05FFA87D%FD04FF52A8A87DA8FD0FFFA8A8FD11FF7DA8FD35FFA8FD13FF7D7DFFA87D%FFA87D5252A87DA87D7DA8FFA87DA8FD0EFFA87DFD11FFA8A8FD35FFA8FD%12FFA87DFFFFFF7D52527E7D7D53FD07FFA87DFD0EFFA8A8FD11FF7D7DFD%34FFA8A8FD12FF52FFFFFFA852527DFD04A852A8FD06FF7D7DFD0DFF7D7D%FD11FFA87DFD35FFA8FD11FF7DA8FFFFA87D7DA852FD047DFF7D7EFD06FF%7DA8FD0CFF7DA8FD11FF7DA8FD47FF7DA8FFFF7D847D525227FD0452FF7D%A8FD05FFA853FD0CFFA87DFD11FFA8A8FD35FFA8FD11FF7DFFFFA87D7EFD%0427F82727537DFF7DFD06FF7DA8FD0BFFA87EFD0DFFA8FFFFFF7DA8FD46%FF7E7EFFFF7DA85227F827F827F8272752A8A87DFD05FF7D7EFD0BFFA87D%FD07FFA853A8FFFFA87E7EFFFFA8A8FD35FFA8FD10FFA87DFFA8A87D5220%2727272027272752A8A87DFD06FF7DFD0BFFA8A8FD07FF7DA97DA8FFA852%7DA8FF7D7DA8FD45FF7DA8FFA87D7D2727F827F827F827F8527DFF7DFD06%FF7DA8FD09FFA87D7DFD06FFA87DFFA87EFFFFFF7D7DFFA853A8FD34FFA8%FD10FFA87DFFA8A87D522727F8272727F827527DA8A8FD06FF7DA8FD08FF%A8A859A8FD07FF59A853FD05A853FF7DA8FD46FFA87DFFFF7D7D2727F827%F827F827F8527DFF7DFD06FFA87DFFFFFF27A8FFFF7D5384AF7DFD08FF7D%A8FFA8FFA87DFFFFA8A8FD35FFA8FD11FF7DFFFFA87D5327272027272720%2752A8FF7EFD05FFA8597D7DFFFF7D7DFFA87DFF7DA8A8FD11FF7DA8FD47%FF7D7DFFA87D7D27F827F827F827527DA8A87DFD06FF5227FFFFFF7DA8FF%A852FF52A87DFD11FFA8A8FD35FF7EFD11FFAF7DFFFF7D7D7D5227272052%527D7DFF7DFD07FF5252A8FFFF7D7DFFA87D7D7DA884FD11FF7D7EFD48FF%7D7DFFFFFD067D537D7DFF7D7DFD06FF7D7D7DA8A8FFA8A87EAFA87DA8A8%7DFD11FFA87DFD35FFA8FD13FF7DA8FFFFA8A87D7D7D84A8FFA87DFD08FF%7EA8FD0AFF7D7EFD11FF7DA8FD4AFF537DFFFFA8FFA8A8FFFF7D7DA8FD08%FF7DA8FD0AFFA97DFD11FFA8A8FD35FFA8FD15FF7D7D7E7D7DA852A87D7D%FD0AFF7DFD0BFFA8A8FD11FF7DA8FD34FFA8FD17FFA8A87D27F87D7DA8FD%0AFFA87DFD0BFFA87DFD11FFA8A8FD35FFA8FD18FFA87DA87DFD0CFFA87D%FD0BFFA8A8FD11FF7D7DFD4EFFA8FFFFA8A9FD0BFF7DA8FD0BFF7D7DFD11%FFA87DFD35FFA8FD27FFA87DFD0CFF7D7DFD11FF7DA8FD35FFA8FD17FFA8%527DA8FFA85352FD08FF7D7DFD0CFFA87DFD11FFA8A8FD35FFA8FD19FF7D%A8FF7DA87D7EFD07FF7DFD0DFFA8A8FD11FF7DA8FD35FFA8FD18FFA87DFF%FF52FF7D7DFD06FF52A8FD0DFFA87DFD11FFA8A8FD4DFFA8527DFFA87D7D%7DA8FD05FF7D7DFD0EFFA8A8FD11FF7D7DFD34FFA8A8FD17FFA8527DA8A8%A87D7DFD05FFA87DA8FD0EFF7D7DFD11FFA87DFD5AFF7DA8FD0FFF7DA8FD%11FF7DA8FD34FFA8A8FD22FFA87DA8FD10FFA87DFD11FFA8A8FD58FF7DA8%FD11FFA87EFD11FF7DA8FD34FFA8A8FD20FFA87DA8FD12FFA87DFD11FFA8%A8FD55FF847DA8FD13FFA8A8FD11FF7D7DFD1EFFA8FD16FFA8FD1EFF7D7D%A8FD14FF7D7DFD11FFA87DFD18FFA8527DFFFF7D537DFD2EFFA8A8FF7D7D%52A8FD16FF7DA8FD11FF7DA8FD18FF52FF52A8FF7DA8FD15FFA8A8FD19FF%7D52527DFD18FFA87DFD11FFA8A8FD16FF847D7DFF7DA8FFA87D7DFD2DFF%A8A8525284FD19FFA8A8FD11FF7DA8FD16FFA8A8527E52A884FF7D7DFD14%FFA8A8FD14FFA87D597E527DFF7DA8FD18FFA87DFD07FFA8527DFFFFA87D%7DA8FFA8A8FD19FF7DFFA8A87D7EFD16FFA8FD0FFFA8A87D7D7DA8A8FD1F%FFA87EFD07FF53FF7DA8FF7D7DFF7DFF7D7D7DA8A8A8FFFD06A8FFA8FFA8%FFA8FFA8FFA8FFA8FFA8FFA8FD04FFA8FFA8FD04FFFD04A87DA87DA87DA8%7DA87DA87D7D7DA8FD0A7D597D527D7DA87DFFA8FFA8FFA8FFA8FFA8FFFD%04A8FFFD06A8FFA8FFA8FFA8FFA8FFA8FF7D7D7DFD07FF7DFFA8A8FF7DA9%FF7DFFA87DA8A8FFA8FFA8FFA8FFA8FFA8FD04FFA9FD08FFAFFFA9FFA8FF%A8FFA8FF7DA852FD047D7E7D7E7DA8A8A87EA8A8A87DA87DA87DA87EA87D%FFA8FFA8FFA8FD08FFA8FD04FFA8FFFFFFA8FFA8FFA8FFA8FFA8FFA8FFAF%FD08FFA87DA8FD07FF7D7D52A8A8A8537D7DFF7DA9FD18FFA8FD05FFA8A8%7D7D7DA8A8AFA8FD27FF7DA8FFFFA87D7DFD16FFA97DFD08FF7DA8FFA8FF%A87DFFFFA8A8FD18FFA953FFFD057DFD15FFA8FD17FF7D7D7DA8FFA859FD%17FFA8A8FD11FF7DA8FD19FF7DF8527DFD17FFA8FD18FF7DA8A852FF7D52%A8FD0FFFA8FD06FFA87DFD11FFA8A8FD17FFA87D527D53FD19FFA8FD17FF%7DA87D7EFFFFA852A8FD0DFF59A8FF7D7DFFFFFFA8A8FD11FF7D7DFD16FF%7D7D7DA8FFA87DFD31FF527DA87D7D7D59FD0EFF7D7DFF527DFFFFFF7D7D%FD11FFA87DFD15FF5284FD1EFF7EFD1DFFA8FD0FFF52A8FF7D7DFFFFFF7D%7EFD11FF7DA8FD13FFA852A8FD4DFF7D7DFF52A8FFFFFFA87DFD11FFA8A8%FD12FFA87DFD21FFA8FD2DFFA97D527DFD04FFA8A8FD11FF7DA8FD11FF7D%52FD52FFA8FD05FFA87DFD11FFA8A8FD10FFA87DFD23FFA8FD35FFA8A8FD%11FF7D7DFD0FFFA852FD5AFF7D7DFD11FFA87DFD0FFF52FD25FFA8FD35FF%7DA8FD11FF7DA8FD0EFF59A8FD08FF7DA8FFFFFFA87DFD4CFFA87DFD11FF%A8A8FD0DFF847DFD08FFA8A852A8FFA87D7DA8FD15FFA8FD35FFA87EFD11%FF7DA8FD0DFF7DA8FD07FFA8FFFF7D7DFF52A87D7DFD15FFA8FD35FFA87D%FD11FFA8A8FD0CFFA87DFD07FFA87DFFA87DFFFF7DA8A87DFD15FFA8FD35%FFA8A8FD11FF7D7DFD0CFF59FD0AFFA8277DA8A8A87D52FD16FFA8FD35FF%7D7DFD11FFA87DFD0BFFA87DFD0CFF7DFFA8A8FD18FFA8FD35FF7DA8FD11%FF7DA8FD0BFF7D7DFD0CFFFD047DFD17FFA8A8FD35FFA87DFD11FFA8A8FD%0BFF7DFD0BFFA8A87D2752A87DFD4DFFA8A8FD11FF7DA8FD0AFFA87DFD0A%FF537DA87DA87D7DA8527DFD14FFA8A8FD35FFA87DFD11FFA8A8FD0AFFA8%7DFD09FF52A9FFFF7DFFA8AFFFFF7D7DFD4AFFA884FD11FF7D7DFD0AFF7D%A8FD08FF52FFFF7EFD057DA8FFFF7D7DFD12FFA8A8FD35FF7D7DFD11FFA8%7DFD09FF7DA87DA8FD06FF7DA8FFFD067DA87D84FFFF7DA8FD48FF7D84FD%11FF7DA8FFFF7E52A8FFFF7D5253527DA8FD05FFA87DFF7D53522727F827%277D7D7DFFFF52FD12FFA8FD35FFA87DFD11FFA8A8FFFFFF52FFFFA852FF%525252FD06FF7EA8FF5952F8272727F827277D7DFFFFA87DFD47FFA8A8FD%08FFA9A8FFFFFFA8A8A8FF7DA87DA8FF7DA8FFA87DFF527D7D7DFD05FF7D%FF7D7DF827F827F827F827527D7DFFA87DFD10FFA8A8FD35FFA87DFD07FF%A87D7DFFFFA87D7DFFFFA8A8FFA8FF52FFA8A859A87DA8A8FD06FF7EA884%5227202727272027274C7DA8FFFF7DFD47FFA8A8FFFFFFA8FFA8FF53FF7D%A8FFA8527DA8FF7D7D7DFFFFFD05A859FFA87DFD06FF7DFF7D52F827F827%2727F827277D7DFFFF7DA8FD0FFFA8A8FD34FF7D7D7DFFFFFF7D7D7EA87D%FFA8A8FFFFFFA87DFFA87DFD0BFF7DFD06FF84A87D28272727F8272727F8%527D7EA8FF7DA8FD46FF7D7EFD07FF7D7D52A87DA87D7D7DFF7DA8FD0BFF%7DA8FD05FF7DFF7D52F827F827F827F82727A87DFFFFA87DFD0FFFA8A8FD%35FFA87DFD08FFA8FD05FFA8FFFFA8A8FD0BFF7DA8FD05FFA8A8FF525227%2720FD04277DA87EFFFF7DA8FD46FFA8A8FD11FF7DA8FD0BFFA97DFD05FF%A87DFF7D5227F827F827F8527D7E7EFFFF7DA8FD10FFA8FD35FFA87DFD11%FFA8A8FD0CFF7DA8FD05FFA87DFF7D527D5252527D7DA87DFFFFFF7DFD11%FFA8FD35FFA8A8FD11FF7D7DA8FD0BFFA87DFD04FFA87D277DFF7D527D52%527D7D52FFFFFF7DA8FD10FFA8A8FD35FF7D7DFD11FFA87DFD0DFF7DA8FD%04FFA87D527D7D7DA8FF7D5253FD04FF7DFD12FFA8FD35FF7DA8FD11FF7D%A8FD0EFF52A8FFA9FFFF52FFFF7D277D7D52527DFFFFFF7D7DFD48FFA87D%FD11FFA8A8FD0FFF7D7D7DFF7DA8FD04FF5284A8FF7DFFFFA87DFD13FFA8%FD35FFA87EFD11FF7DA8FD10FF52A8A85259A87DA8537DA8FFFFFFA87D53%FD4AFFA87DFD11FFA8A8FD11FF7D7DA8FD07FF7D847D527DFD15FFA8FD35%FFA8A8FD11FF7D7DFD12FFA87D7DA8A8FFFFFFA8A82727A8FD4CFF7D7DFD%11FFA87DFD14FFA97D7D7D847D7D527D7D7DFD16FFA8FD35FF7DA8FD11FF%7DA8FD18FFA8FFFFA8A8FF7DFD4CFFA87DFD11FFA8A8FD35FFA8FD35FFA8%A8FD11FF7DA8FD1AFFA87DFFFFFF7D53FD4AFFA87DFD11FFA8A8FD1AFFA8%52FFFFA852A9FD14FF7EFD35FFA87EFD11FF7D7DFD18FFA8FFFF7DA8FF84%527DFD4AFF7D7DFD11FFA8A8FD17FFA87DA8FF52FD04FF59A8FD13FFA8FD%35FFA8A8FD11FF7DA8FD1AFFA87DA87D7D7D53FD4AFFA87DFD11FFA8A8FD%1FFFA8FD15FFA8FD35FFA8A8FD11FF7DA8FD34FFA8FD36FFA87DFD11FFA8%A8FD35FFA8FD35FFA8A8FD11FF7D7DFD34FFAFA8FD35FF7D7DFD11FFA8A8%FD35FFA8FD35FFA87EFD08FFA8A8FFFFFF7DA8FFFF7DA8FD34FFAFA8FD35%FFA87DFD08FF52A8FFFFA87D7DA8FFA8A8FD6BFFA8A8FFFFFF7DA87DFFFF%A87DFFFF7DA8FF7DFF7DA8FD19FFA87DFD19FFA87DFD1AFF7DA8FD19FFA8%7DFFFFFFFD04A8FF7DA8FFFF7DA8A87DFFA8A8FFFFFFA8A8FD04FFA8FD05%FFA8FD04FFA8FD04FFA8A8FD04FF7EFD05FFA8FD04FFA8FD04FFA8FD05FF%7DFD04FFA8A8FD04FFA8FD04FFA8FD05FFA8FD04FFA8A8FD04FFA8FD04FF%A8FD05FFA8FD04FFA8A8FFFFFFA884FD08FFA8A8FF7DFF597DA8FFFD067D%52FD047D59537D7D7D5352FD047D52FD057D52FD047D52597D7D7D52FD05%7D52FD057D527D7D7D5952FD047D52FD057D52FD057D52FD047D52FD047D%52FD057D52FD047D52527D7D7D52FD057D52FD067DFD12FFA8FFAFFFA8FF%AFFFA8FFFFFFA8FFA9FFFFFFAFFFA8FFFFFFA8FFFFFFA8FFAFFFFFFFAFFF%A8FFFFFFA8FFFFFFA8FFAFFFFFFFA9FFA8FFFFFFA8FFA8FFAFFFAFFFA8FF%AFFFA8FFFFFFA8FFAFFFFFFFAFFFA8FFFFFFA8FFFFFFA8FFAFFFFFFFA9FF%A8FFFFFFA8FFA9FFA8FFAFFFA8FDFCFFFD16FFA8FFFFFFA87DA8FD13FFA8%7DA8FFFFFF7DA8AFFD11FF7DA8FFFFFFA87DFD14FFA87DFFFFFF7DA8A8FD%13FFA8A8FD04FF7DA8FD0DFF7D7DFFFFFF7D7D7DA8FD12FF7D7D7DFFFF7D%52A8FD11FF7DA87DFFFFA87D7D84FD12FFA87D7DA8FFA87D7DFD14FFA852%FFFFFF7DA853FD08FFA8A87DA8FFFF59FFFFFF59FF7DA8FD0EFF7DA87DFF%7DFF7DA8FFA87D7D84FD0FFFA87DFFA8A8FF7DFFA87DFD12FF7DFFA87DFF%FF7D7D7DFD14FF7DA8FFA87DFFA8FD09FF7EA8A8FFFF7DFFFFFF7DFF84A8%FD0DFFFD05A87DFF7DA8FFA8FFA87DFD10FF7DFF7DA8FF7DA8A97DFD12FF%7DA8A87DFD04FF7DFD14FF7DFFFFFF7DFF7DFD0EFF7DFF7DA8A8597DFD13%FF7D7D7DA87DA8527DA8FD10FFA8527DA87EA87D52FD13FFA87D52FF7DA8%597D7DFD13FFA8A8FFA87DA8527D%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                  
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2011-10-05T12:27:51+02:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>252</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAD8AwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4qxOws4bT8ydZnWSU/&#xA;W9Ls55xLK7opWadPgViVjXivRadzirHvNN35J1bXrq41+8tbjRF0OO60G6MytF6vrXAu57Vw3EzI&#xA;q2/FkPIV264qjL3Tk1mz/L+18z2cN9JOPU1G0u41mjNwNMlZiySqQSr16jFU4ufyr/Lae2lg/wAL&#xA;6TF6qMnqxWFqrryFOSN6ezDscVdbflX+W0FtFB/hfSZfSRU9WWwtWduIpydvT3Y9ziqlbflL+W0F&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmp:MetadataDate>2011-10-05T12:27:51+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2011-10-05T12:27:51+02:00</xmp:ModifyDate>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>210.001480</stDim:w>
            <stDim:h>297.000132</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>MyriadPro-Regular</stFnt:fontName>
                  <stFnt:fontFamily>Myriad Pro</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 2.037;PS 2.000;hotconv 1.0.51;makeotf.lib2.0.18671</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>MyriadPro-Regular.otf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:DerivedFrom rdf:parseType="Resource"/>
         <xmpMM:DocumentID>xmp.did:F77F1174072068118DBB935F0F49B776</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:F77F1174072068118DBB935F0F49B776</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:F77F1174072068118DBB935F0F49B776</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:F77F1174072068118DBB935F0F49B776</stEvt:instanceID>
                  <stEvt:when>2011-10-05T12:27:51+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -239.788 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 239.788 li
236.428 239.788 li
236.428 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
0 lc
0 lj
2.5 ml
[] 0 dsh
true sadj
177.59 59.0356 mo
180 58.7803 li
181.134 56.3994 li
180 54.0464 li
177.59 53.7915 li
176.06 55.8892 li
176.826 58.4404 li
179.15 59.1489 li
180.936 57.3633 li
180.595 54.6982 li
178.384 53.6211 li
176.343 55.0669 li
176.372 57.7598 li
178.413 59.1772 li
180.595 58.0151 li
180.879 55.3506 li
179.008 53.6777 li
176.741 54.5566 li
176.173 57.1646 li
177.903 59.0356 li
180.227 58.4121 li
180.993 55.8892 li
179.433 53.8481 li
177.052 54.2451 li
176.145 56.7109 li
177.562 58.8652 li
179.972 58.6387 li
180.993 56.229 li
179.66 53.9897 li
177.279 54.1313 li
176.145 56.4844 li
177.42 58.752 li
179.802 58.6953 li
180.993 56.3711 li
179.745 54.0747 li
177.335 54.103 li
176.173 56.4277 li
177.42 58.7236 li
179.802 58.667 li
180.964 56.3145 li
179.66 54.0464 li
177.279 54.1885 li
176.202 56.5693 li
177.562 58.7803 li
179.944 58.5254 li
180.908 56.0874 li
179.433 53.9614 li
177.081 54.3867 li
176.258 56.8813 li
177.875 58.8652 li
180.199 58.2417 li
180.823 55.6904 li
179.065 53.8765 li
176.797 54.7266 li
176.428 57.3633 li
178.356 58.9502 li
180.51 57.8164 li
180.595 55.1519 li
178.498 53.8481 li
176.485 55.2939 li
176.741 57.9302 li
178.98 58.8936 li
180.765 57.1362 li
180.142 54.5566 li
177.79 54.0181 li
176.315 56.0874 li
177.307 58.4971 li
179.716 58.582 li
180.823 56.229 li
179.433 54.0747 li
177.081 54.5283 li
176.4 57.0796 li
178.186 58.8369 li
180.397 57.8447 li
180.539 55.209 li
178.441 53.9331 li
176.513 55.4639 li
176.911 58.0718 li
179.235 58.752 li
180.765 56.7393 li
179.774 54.3301 li
177.392 54.3301 li
176.372 56.7109 li
177.931 58.7236 li
180.227 58.0151 li
180.567 55.4072 li
178.583 53.9614 li
176.57 55.4072 li
176.939 58.0151 li
179.235 58.6953 li
180.737 56.6543 li
179.66 54.3018 li
177.279 54.4717 li
176.457 56.938 li
178.186 58.752 li
180.369 57.7314 li
180.369 55.0952 li
178.186 54.0464 li
176.485 55.8892 li
177.335 58.3271 li
179.716 58.4121 li
180.68 56.0024 li
179.065 54.1035 li
176.826 55.0386 li
176.769 57.6465 li
178.952 58.7236 li
180.652 56.8813 li
179.745 54.4434 li
177.364 54.4717 li
176.513 56.9097 li
178.243 58.6953 li
180.397 57.5615 li
180.227 54.9536 li
177.959 54.1885 li
176.485 56.2295 li
177.676 58.4971 li
180.029 58.0718 li
180.482 55.4922 li
178.469 54.1035 li
176.598 55.6904 li
177.279 58.2134 li
179.66 58.3555 li
180.595 55.9458 li
178.895 54.1318 li
176.769 55.2939 li
177.024 57.9019 li
179.32 58.5254 li
180.624 56.3428 li
179.207 54.2451 li
176.939 55.0386 li
176.854 57.6465 li
179.065 58.582 li
180.595 56.5977 li
179.405 54.3301 li
177.081 54.8687 li
176.797 57.4766 li
178.923 58.6104 li
180.567 56.7393 li
179.49 54.415 li
177.166 54.812 li
176.769 57.3916 li
178.867 58.6104 li
180.539 56.7681 li
179.49 54.4434 li
177.166 54.812 li
176.797 57.3916 li
178.895 58.582 li
180.539 56.7109 li
179.405 54.415 li
177.109 54.9253 li
176.854 57.5049 li
179.037 58.5254 li
180.539 56.5127 li
179.235 54.3584 li
176.996 55.0952 li
176.996 57.7031 li
179.263 58.4404 li
180.51 56.2295 li
178.98 54.2734 li
176.854 55.3789 li
177.222 57.9585 li
179.546 58.27 li
180.454 55.8608 li
178.611 54.2451 li
176.712 55.7759 li
177.534 58.2134 li
179.887 57.9585 li
180.284 55.4072 li
178.158 54.3018 li
176.656 56.3145 li
177.988 58.4404 li
180.199 57.5332 li
179.972 54.9536 li
177.647 54.5566 li
176.712 56.938 li
178.583 58.4971 li
180.425 56.9097 li
179.461 54.5283 li
177.166 54.9819 li
176.996 57.5898 li
179.235 58.3555 li
180.454 56.144 li
178.782 54.3301 li
176.797 55.6904 li
177.534 58.1284 li
179.859 57.9019 li
180.17 55.3506 li
177.988 54.415 li
176.712 56.5693 li
178.328 58.4404 li
180.312 57.1079 li
179.575 54.6704 li
177.25 54.9536 li
176.996 57.5049 li
179.207 58.3271 li
180.397 56.0874 li
178.667 54.3584 li
176.797 55.8608 li
177.733 58.2134 li
180 57.6748 li
179.972 55.0952 li
177.676 54.6133 li
176.826 56.9946 li
178.782 58.4121 li
180.397 56.5693 li
179.065 54.4434 li
176.939 55.4922 li
177.477 58.0151 li
179.802 57.8735 li
180.114 55.3223 li
177.903 54.5283 li
176.797 56.7964 li
178.611 58.4121 li
180.34 56.7109 li
179.15 54.5 li
176.996 55.4639 li
177.477 57.9585 li
179.774 57.8735 li
180.057 55.3223 li
177.846 54.585 li
176.854 56.8813 li
178.753 58.3555 li
180.34 56.5127 li
178.952 54.4717 li
176.911 55.6904 li
177.676 58.1001 li
179.944 57.6182 li
179.859 55.0669 li
177.562 54.7837 li
176.996 57.2783 li
179.122 58.2417 li
180.284 56.0308 li
178.498 54.4434 li
176.826 56.2295 li
178.186 58.2988 li
180.199 57.0513 li
179.376 54.6704 li
177.137 55.2939 li
177.392 57.8452 li
179.716 57.8452 li
180 55.3223 li
177.79 54.6987 li
176.939 57.0796 li
178.98 58.27 li
180.284 56.144 li
178.554 54.5 li
176.854 56.2295 li
178.214 58.27 li
180.199 56.9663 li
179.263 54.6704 li
177.081 55.4639 li
177.59 57.9585 li
179.859 57.6465 li
179.802 55.0952 li
177.505 54.9253 li
177.137 57.4199 li
179.376 58.0718 li
180.142 55.6621 li
178.044 54.6133 li
176.911 56.8247 li
178.81 58.2417 li
180.255 56.2861 li
178.583 54.5283 li
176.882 56.2295 li
178.299 58.2417 li
180.199 56.8247 li
179.065 54.6138 li
177.024 55.7192 li
177.846 58.0718 li
180.029 57.3066 li
179.461 54.8403 li
177.222 55.3223 li
177.505 57.8169 li
179.802 57.6465 li
179.774 55.124 li
177.477 55.0103 li
177.279 57.5332 li
179.518 57.9019 li
179.972 55.4072 li
177.733 54.812 li
177.109 57.25 li
179.263 58.0435 li
180.085 55.6909 li
177.988 54.6987 li
177.024 56.9946 li
179.037 58.1284 li
180.142 55.9175 li
178.186 54.6421 li
176.967 56.7681 li
178.867 58.1851 li
180.17 56.1157 li
178.356 54.6138 li
176.967 56.5977 li
178.725 58.1851 li
180.17 56.2578 li
178.441 54.6138 li
176.967 56.5127 li
178.639 58.1851 li
180.17 56.3145 li
178.526 54.6138 li
176.967 56.4561 li
178.611 58.1851 li
180.17 56.3428 li
178.526 54.6138 li
176.967 56.4561 li
178.639 58.1567 li
180.17 56.3145 li
178.469 54.6421 li
176.996 56.5127 li
178.696 58.1567 li
180.142 56.2295 li
178.384 54.6421 li
176.996 56.6543 li
178.81 58.1284 li
180.114 56.0874 li
178.243 54.6987 li
177.052 56.7964 li
178.98 58.0718 li
180.057 55.8892 li
178.073 54.7554 li
177.109 57.0229 li
179.178 57.9868 li
179.972 55.6626 li
177.846 54.8687 li
177.222 57.2783 li
179.405 57.8452 li
179.831 55.4072 li
177.619 55.0386 li
177.392 57.5332 li
179.66 57.6182 li
179.603 55.124 li
177.364 55.3223 li
177.676 57.7886 li
179.859 57.3066 li
179.32 54.897 li
177.166 55.6626 li
178.016 57.9868 li
180.029 56.9097 li
178.923 54.7554 li
177.052 56.1445 li
178.441 58.0718 li
180.085 56.3994 li
178.469 54.6987 li
177.052 56.6543 li
178.923 58.0435 li
180 55.8608 li
177.959 54.8403 li
177.222 57.1934 li
179.405 57.7886 li
179.745 55.3506 li
177.505 55.209 li
177.59 57.6748 li
179.802 57.3633 li
179.292 54.9536 li
177.194 55.7476 li
178.129 57.9868 li
180.029 56.7114 li
178.696 54.7554 li
177.081 56.4277 li
178.782 58.0435 li
180.029 56.0024 li
178.044 54.8403 li
177.25 57.165 li
179.405 57.7603 li
179.688 55.2939 li
177.449 55.3223 li
177.733 57.7603 li
179.887 57.1362 li
179.065 54.8403 li
177.137 56.0591 li
178.469 58.0151 li
180.029 56.2861 li
178.271 54.812 li
177.194 56.938 li
179.235 57.8452 li
179.774 55.4639 li
177.562 55.2373 li
177.676 57.6748 li
179.859 57.1934 li
179.093 54.8687 li
177.137 56.0591 li
178.498 58.0151 li
180.029 56.2295 li
178.186 54.8403 li
177.25 57.0513 li
179.376 57.7314 li
179.631 55.2939 li
177.42 55.4355 li
177.903 57.8169 li
179.944 56.8813 li
178.753 54.812 li
177.137 56.4561 li
178.867 57.9585 li
179.887 55.7759 li
177.79 55.0669 li
177.534 57.4766 li
179.716 57.335 li
179.178 54.9536 li
177.194 56.0024 li
178.469 57.9868 li
179.972 56.2012 li
178.129 54.897 li
177.335 57.1646 li
179.49 57.5898 li
179.433 55.1523 li
177.307 55.7192 li
178.214 57.9302 li
179.972 56.4561 li
178.328 54.8403 li
177.25 56.9663 li
179.348 57.7031 li
179.546 55.2656 li
177.364 55.5771 li
178.101 57.8735 li
179.972 56.5693 li
178.413 54.8403 li
177.25 56.9097 li
179.32 57.7031 li
179.575 55.2939 li
177.392 55.5771 li
178.129 57.8735 li
179.944 56.541 li
178.384 54.8687 li
177.279 56.9663 li
179.376 57.6465 li
179.461 55.2373 li
177.335 55.6909 li
178.271 57.9019 li
179.944 56.3711 li
178.186 54.9253 li
177.364 57.1646 li
179.546 57.4766 li
179.263 55.0952 li
177.25 55.9741 li
178.526 57.9302 li
179.916 56.0308 li
177.903 55.0669 li
177.59 57.4482 li
179.745 57.1646 li
178.923 54.9253 li
177.194 56.3994 li
178.952 57.8452 li
179.745 55.6055 li
177.562 55.3789 li
177.959 57.7314 li
179.916 56.6826 li
178.441 54.897 li
177.307 56.9663 li
179.405 57.5898 li
179.348 55.1807 li
177.279 55.9175 li
178.526 57.9019 li
179.859 56.0024 li
177.846 55.1235 li
177.676 57.5332 li
179.802 56.9946 li
178.725 54.9253 li
177.25 56.6826 li
179.207 57.7031 li
179.49 55.3223 li
177.364 55.7476 li
178.384 57.8735 li
179.887 56.144 li
177.959 55.0952 li
177.647 57.4482 li
179.774 57.0229 li
178.725 54.9253 li
177.279 56.6826 li
179.235 57.6748 li
179.433 55.2939 li
177.335 55.8325 li
178.498 57.8452 li
179.831 56.0024 li
177.818 55.209 li
177.79 57.5898 li
179.831 56.7964 li
178.498 54.9536 li
177.364 56.9663 li
179.461 57.4766 li
179.178 55.0952 li
177.279 56.2012 li
178.867 57.8169 li
179.66 55.6055 li
177.534 55.5488 li
178.214 57.7886 li
179.859 56.2861 li
178.016 55.0957 li
177.676 57.4199 li
179.774 56.9663 li
178.611 54.9536 li
177.335 56.853 li
179.405 57.5049 li
179.178 55.1523 li
177.279 56.2295 li
178.895 57.7886 li
179.603 55.5488 li
177.477 55.6338 li
178.356 57.7886 li
179.831 56.1157 li
177.846 55.209 li
177.875 57.5898 li
82.6865 166.724 mo
82.7432 169.502 li
81.6377 171.968 li
79.5967 173.556 li
77.1309 173.924 li
74.7778 172.988 li
73.1055 170.947 li
72.4536 168.255 li
73.0205 165.562 li
74.6079 163.436 li
76.9038 162.358 li
79.3984 162.528 li
81.5244 163.946 li
82.8569 166.299 li
83.1118 169.048 li
82.2329 171.628 li
80.3906 173.499 li
78.0093 174.292 li
75.5435 173.811 li
73.5308 172.194 li
72.3403 169.729 li
72.2554 166.979 li
73.2471 164.428 li
75.1465 162.642 li
77.5845 161.905 li
80.022 162.415 li
82.063 164.031 li
83.2817 166.469 li
83.4521 169.219 li
82.5449 171.798 li
80.731 173.726 li
78.3779 174.633 li
75.8833 174.377 li
73.729 172.988 li
72.2837 170.749 li
71.7734 168.027 li
72.3403 165.335 li
73.8423 163.096 li
76.0537 161.764 li
78.5195 161.508 li
80.9009 162.415 li
82.7432 164.286 li
83.7637 166.809 li
83.792 169.587 li
82.8281 172.138 li
81.0425 174.065 li
78.7183 175.086 li
76.1953 174.973 li
73.9277 173.811 li
72.2549 171.77 li
71.4048 169.162 li
71.5181 166.384 li
72.5669 163.89 li
74.4097 161.99 li
76.7622 161.026 li
79.2568 161.111 li
81.5527 162.217 li
83.3101 164.201 li
84.2739 166.78 li
84.3306 169.559 li
83.4521 172.138 li
81.7793 174.207 li
79.5684 175.483 li
77.0737 175.738 li
74.6362 175.029 li
72.6235 173.386 li
71.2632 171.032 li
70.7529 168.312 li
71.1211 165.562 li
72.3403 163.152 li
74.2393 161.338 li
76.5923 160.374 li
79.0864 160.374 li
81.4395 161.31 li
83.3667 163.096 li
84.6426 165.477 li
85.0962 168.227 li
84.6992 170.976 li
83.5088 173.413 li
81.6377 175.284 li
79.3418 176.361 li
76.8472 176.531 li
74.4097 175.795 li
72.3403 174.235 li
70.8379 171.996 li
70.0723 169.36 li
70.0723 166.582 li
70.8945 163.946 li
72.397 161.734 li
74.4663 160.176 li
76.8755 159.382 li
79.3984 159.467 li
81.751 160.402 li
83.7354 162.104 li
85.1812 164.371 li
85.918 167.035 li
85.918 169.813 li
85.1528 172.479 li
83.7354 174.746 li
81.751 176.475 li
79.3984 177.467 li
76.9038 177.665 li
74.4663 177.042 li
72.2549 175.682 li
70.5259 173.697 li
69.3638 171.23 li
68.8818 168.481 li
69.0801 165.731 li
69.9873 163.124 li
71.5181 160.913 li
73.5024 159.24 li
75.855 158.22 li
78.3496 157.965 li
80.8159 158.446 li
83.0835 159.638 li
84.9829 161.451 li
86.3999 163.775 li
87.1938 166.412 li
87.3638 169.19 li
86.8818 171.911 li
85.8047 174.435 li
84.1606 176.531 li
82.1196 178.147 li
79.7388 179.111 li
77.2441 179.423 li
74.7778 179.026 li
72.4253 177.978 li
70.4126 176.333 li
68.7969 174.207 li
67.6914 171.685 li
67.1245 168.991 li
67.1812 166.186 li
67.8047 163.492 li
68.9668 161.026 li
70.6108 158.929 li
72.6519 157.284 li
74.9766 156.179 li
77.4424 155.697 li
79.9653 155.839 li
82.375 156.548 li
84.6143 157.852 li
86.5132 159.665 li
88.0439 161.877 li
89.1211 164.399 li
89.7163 167.093 li
89.7734 169.898 li
89.2915 172.62 li
88.356 175.199 li
86.9385 177.523 li
85.1528 179.479 li
83.0269 181.011 li
80.7026 182.031 li
78.2363 182.541 li
75.7134 182.541 li
73.2471 181.975 li
70.9229 180.926 li
68.8252 179.423 li
66.9829 177.495 li
65.5088 175.228 li
64.4316 172.705 li
63.7793 170.012 li
63.5527 167.234 li
63.751 164.456 li
64.4033 161.763 li
65.4517 159.24 li
66.8975 156.944 li
68.6265 154.932 li
70.6675 153.287 li
72.9072 152.012 li
75.2881 151.161 li
77.7827 150.736 li
80.3057 150.765 li
82.7998 151.218 li
85.1812 152.068 li
87.4204 153.345 li
89.4614 154.96 li
91.2759 156.888 li
92.8345 159.099 li
94.0537 161.536 li
94.9604 164.145 li
95.5562 166.865 li
95.7827 169.644 li
95.6694 172.422 li
95.2158 175.171 li
94.4507 177.836 li
93.3735 180.358 li
92.0127 182.711 li
90.397 184.837 li
88.5542 186.765 li
86.5415 188.381 li
84.3306 189.741 li
82.0063 190.818 li
79.5684 191.556 li
77.0742 191.98 li
74.5796 192.122 li
72.0566 191.924 li
69.5903 191.442 li
67.1528 190.677 li
64.8281 189.6 li
62.6172 188.296 li
60.5195 186.736 li
58.564 184.979 li
56.8062 182.995 li
55.1904 180.841 li
53.7729 178.516 li
52.5542 176.078 li
51.562 173.527 li
50.7402 170.862 li
50.145 168.17 li
49.748 165.42 li
49.5493 162.613 li
49.5493 159.836 li
49.748 157.058 li
50.145 154.279 li
50.7119 151.559 li
51.4487 148.894 li
52.356 146.286 li
53.4331 143.763 li
54.6519 141.325 li
55.9844 138.973 li
57.458 136.705 li
59.0737 134.551 li
60.7749 132.481 li
62.5889 130.554 li
64.4883 128.711 li
66.4722 127.011 li
68.5415 125.395 li
70.6675 123.893 li
72.8506 122.503 li
75.0898 121.228 li
77.3857 120.065 li
79.7104 118.988 li
82.063 118.024 li
84.4727 117.146 li
86.8818 116.38 li
89.3198 115.672 li
91.7856 115.077 li
94.252 114.538 li
96.7466 114.084 li
99.2407 113.688 li
101.735 113.347 li
104.23 113.092 li
106.752 112.865 li
109.276 112.695 li
111.77 112.554 li
114.293 112.44 li
116.816 112.384 li
119.338 112.327 li
121.862 112.298 li
124.384 112.298 li
126.907 112.298 li
129.402 112.298 li
131.924 112.298 li
134.448 112.27 li
136.97 112.27 li
139.493 112.213 li
142.016 112.157 li
144.539 112.043 li
147.034 111.902 li
149.556 111.731 li
152.079 111.505 li
154.574 111.25 li
157.068 110.91 li
159.562 110.513 li
162.057 110.059 li
164.523 109.521 li
166.989 108.897 li
169.427 108.217 li
171.836 107.423 li
174.246 106.573 li
176.599 105.581 li
178.923 104.532 li
181.219 103.37 li
183.458 102.065 li
185.641 100.705 li
187.767 99.2026 li
189.836 97.5869 li
191.821 95.8857 li
193.72 94.0435 li
195.534 92.0874 li
197.235 90.0464 li
198.851 87.8921 li
200.325 85.6245 li
201.685 83.2715 li
202.875 80.834 li
203.953 78.311 li
204.86 75.7031 li
205.597 73.0386 li
206.165 70.3174 li
206.561 67.5396 li
206.759 64.7617 li
206.759 61.9834 li
206.561 59.1772 li
206.165 56.4277 li
205.569 53.7065 li
204.747 51.0703 li
203.754 48.519 li
202.536 46.0811 li
201.119 43.7568 li
199.502 41.6025 li
197.746 39.6182 li
195.79 37.8608 li
193.692 36.3018 li
191.481 34.9692 li
189.156 33.9204 li
186.747 33.1553 li
184.252 32.6733 li
181.729 32.4746 li
179.235 32.5884 li
176.741 33.042 li
174.302 33.7788 li
171.978 34.856 li
169.795 36.1885 li
167.754 37.8325 li
165.912 39.7314 li
164.296 41.8857 li
162.936 44.2388 li
161.859 46.7617 li
161.093 49.4258 li
160.639 52.1758 li
160.526 54.9536 li
160.753 57.7314 li
161.348 60.4526 li
162.255 63.0605 li
163.502 65.4985 li
165.034 67.6812 li
166.847 69.6372 li
168.888 71.2529 li
171.127 72.5 li
173.538 73.3789 li
176.003 73.8325 li
178.526 73.8608 li
181.021 73.4355 li
183.402 72.585 li
185.641 71.3096 li
187.682 69.6655 li
189.412 67.6528 li
190.857 65.3569 li
191.906 62.834 li
192.558 60.1411 li
192.756 57.3633 li
192.558 54.585 li
191.877 51.8921 li
190.8 49.3691 li
189.327 47.1016 li
187.512 45.1738 li
185.386 43.6719 li
183.062 42.623 li
180.595 42.0562 li
178.073 42.0273 li
175.607 42.5664 li
173.282 43.5864 li
171.156 45.1172 li
169.371 47.0732 li
167.981 49.3975 li
167.017 51.9771 li
166.564 54.6982 li
166.592 57.5049 li
167.188 60.1978 li
168.265 62.7207 li
169.795 64.9316 li
171.723 66.7456 li
173.934 68.0498 li
176.372 68.7583 li
178.867 68.8999 li
181.333 68.418 li
183.657 67.3125 li
185.698 65.6685 li
187.342 63.5708 li
188.504 61.105 li
189.127 58.4121 li
189.184 55.6055 li
188.618 52.8843 li
187.512 50.3896 li
185.896 48.2637 li
183.883 46.6196 li
181.559 45.5708 li
179.065 45.1738 li
176.571 45.4858 li
174.217 46.4497 li
172.148 48.0371 li
170.504 50.1631 li
169.427 52.686 li
168.945 55.4072 li
169.115 58.1851 li
169.909 60.8213 li
171.327 63.1455 li
173.225 64.96 li
175.493 66.1504 li
177.959 66.6323 li
180.454 66.3774 li
182.806 65.3569 li
184.791 63.6846 li
186.322 61.4731 li
187.229 58.8652 li
187.456 56.1157 li
186.945 53.3662 li
185.783 50.8999 li
184.054 48.916 li
181.872 47.5269 li
179.405 46.9316 li
176.911 47.1299 li
174.558 48.1221 li
172.574 49.8511 li
171.156 52.1191 li
170.391 54.7837 li
170.391 57.5615 li
171.127 60.2261 li
172.574 62.4937 li
174.558 64.1943 li
176.911 65.1299 li
179.433 65.2148 li
181.842 64.4214 li
183.912 62.8623 li
185.415 60.6514 li
186.237 58.0151 li
186.265 55.2373 li
185.471 52.6011 li
183.968 50.3613 li
181.899 48.8022 li
179.49 48.0654 li
176.967 48.2354 li
174.671 49.3125 li
172.8 51.1836 li
171.61 53.6211 li
171.212 56.3711 li
171.667 59.0923 li
172.942 61.5015 li
174.87 63.2876 li
177.222 64.2231 li
179.716 64.2231 li
182.07 63.2593 li
183.968 61.4448 li
185.188 59.0073 li
185.556 56.2861 li
185.045 53.5645 li
183.685 51.2119 li
181.672 49.5679 li
179.235 48.8306 li
176.741 49.1143 li
174.53 50.3896 li
172.857 52.459 li
171.978 55.0386 li
172.035 57.8164 li
172.999 60.396 li
174.756 62.3804 li
177.052 63.4858 li
179.546 63.5708 li
181.899 62.6074 li
183.742 60.708 li
184.791 58.2134 li
184.904 55.4355 li
184.054 52.8276 li
182.381 50.7866 li
180.114 49.6245 li
177.59 49.5112 li
175.266 50.5034 li
173.481 52.459 li
172.517 55.0103 li
172.545 57.7881 li
173.566 60.311 li
175.408 62.1821 li
177.79 63.0605 li
180.284 62.834 li
182.466 61.4731 li
183.968 59.2622 li
184.536 56.5693 li
184.026 53.8481 li
182.58 51.6089 li
180.425 50.2197 li
177.931 49.9365 li
175.579 50.8716 li
173.764 52.7993 li
172.885 55.3789 li
173.055 58.1284 li
174.246 60.5664 li
176.287 62.1821 li
178.753 62.6924 li
181.163 61.9551 li
183.062 60.1694 li
184.054 57.6182 li
183.968 54.8687 li
182.806 52.4023 li
180.765 50.7866 li
178.328 50.3047 li
175.918 51.0986 li
174.076 52.9692 li
173.197 55.5488 li
173.452 58.2983 li
174.785 60.6514 li
176.939 62.0684 li
179.405 62.2388 li
181.701 61.1616 li
183.317 59.0356 li
183.855 56.3145 li
183.204 53.6494 li
181.531 51.6089 li
179.178 50.6733 li
176.712 51.042 li
174.671 52.6289 li
173.566 55.0952 li
173.623 57.873 li
174.841 60.2827 li
176.967 61.7568 li
179.433 61.9268 li
181.701 60.7646 li
183.204 58.5537 li
183.543 55.8325 li
182.665 53.2529 li
180.765 51.4668 li
178.328 50.9282 li
175.947 51.7788 li
174.246 53.7915 li
173.679 56.4844 li
174.359 59.1489 li
176.145 61.0762 li
178.554 61.7568 li
180.964 61.0479 li
182.721 59.064 li
183.345 56.3994 li
182.693 53.7349 li
180.908 51.8071 li
178.498 51.1553 li
176.117 51.9487 li
174.416 53.9614 li
173.906 56.6543 li
174.7 59.2905 li
176.598 61.0767 li
179.065 61.5015 li
181.361 60.4814 li
182.863 58.2417 li
183.09 55.5205 li
181.985 53.0259 li
179.887 51.5806 li
177.392 51.5522 li
175.266 52.9976 li
174.161 55.4639 li
174.387 58.1851 li
175.918 60.3677 li
178.243 61.3315 li
180.68 60.7363 li
182.438 58.7803 li
182.977 56.0874 li
182.098 53.5078 li
180.114 51.8638 li
177.647 51.6655 li
175.464 53.0259 li
174.331 55.4639 li
174.586 58.2134 li
176.145 60.3394 li
178.526 61.1616 li
180.908 60.3677 li
182.495 58.27 li
182.75 55.5205 li
181.587 53.083 li
179.376 51.8071 li
176.911 52.1191 li
175.04 53.9048 li
174.387 56.5693 li
175.238 59.1489 li
177.25 60.7646 li
179.716 60.793 li
181.786 59.2622 li
182.665 56.6826 li
182.07 54.0181 li
180.17 52.2324 li
177.705 51.9771 li
175.579 53.3662 li
174.558 55.8608 li
175.04 58.5537 li
176.854 60.4243 li
179.32 60.7646 li
181.474 59.4326 li
182.523 56.938 li
182.042 54.2451 li
180.199 52.4023 li
177.733 52.1191 li
175.607 53.5361 li
174.671 56.0591 li
175.266 58.7236 li
177.194 60.4526 li
179.688 60.5381 li
181.701 58.9502 li
182.438 56.3145 li
181.587 53.7349 li
179.49 52.2607 li
177.024 52.5156 li
175.209 54.3867 li
174.813 57.0796 li
176.003 59.4893 li
178.271 60.5664 li
180.652 59.8857 li
182.155 57.7031 li
182.098 54.9536 li
180.51 52.856 li
178.073 52.2891 li
175.89 53.5361 li
174.87 56.0591 li
175.521 58.6953 li
177.505 60.311 li
179.972 60.1694 li
181.786 58.3267 li
182.155 55.6055 li
180.879 53.2529 li
178.554 52.374 li
176.23 53.3379 li
175.011 55.7188 li
175.464 58.4121 li
177.364 60.1411 li
179.831 60.1128 li
181.701 58.3267 li
182.07 55.6338 li
180.765 53.3096 li
178.413 52.459 li
176.145 53.5361 li
175.068 56.0024 li
175.692 58.6387 li
177.733 60.1694 li
180.199 59.8291 li
181.814 57.7881 li
181.814 55.0669 li
180.199 52.9976 li
177.761 52.686 li
175.72 54.2168 li
175.153 56.8813 li
176.343 59.2905 li
178.667 60.1978 li
180.936 59.1206 li
181.956 56.6543 li
181.219 54.0464 li
179.093 52.686 li
176.684 53.2813 li
175.294 55.5488 li
175.664 58.2417 li
177.562 59.9424 li
180.029 59.7441 li
181.672 57.7031 li
181.644 54.9819 li
179.916 53.0542 li
177.449 52.9409 li
175.635 54.7554 li
175.436 57.4766 li
176.996 59.5742 li
179.433 59.9141 li
181.389 58.2417 li
181.729 55.5488 li
180.284 53.3379 li
177.875 52.8843 li
175.862 54.4434 li
175.408 57.1362 li
176.797 59.3755 li
179.207 59.8857 li
181.248 58.355 li
181.701 55.6904 li
180.312 53.4229 li
177.875 52.9692 li
175.89 54.5283 li
175.493 57.2212 li
176.967 59.4038 li
179.405 59.7725 li
181.304 58.0718 li
181.559 55.3789 li
179.972 53.3096 li
177.534 53.1396 li
175.72 55.0103 li
175.72 57.7031 li
177.477 59.6025 li
179.916 59.4609 li
181.502 57.4199 li
181.248 54.6987 li
179.263 53.083 li
176.854 53.5928 li
175.549 55.8892 li
176.202 58.4971 li
178.384 59.7441 li
180.68 58.8086 li
181.587 56.2861 li
180.51 53.8481 li
178.186 53.083 li
176.088 54.5283 li
175.664 57.1929 li
177.166 59.3188 li
179.603 59.4893 li
181.333 57.5615 li
181.191 54.8687 li
179.263 53.1963 li
176.854 53.7349 li
175.635 56.0874 li
176.428 58.6387 li
178.725 59.6309 li
180.879 58.3838 li
181.417 55.7471 li
179.972 53.5645 li
177.534 53.3945 li
175.833 55.3223 li
176.088 58.0151 li
178.101 59.5459 li
180.454 58.8086 li
181.446 56.3428 li
180.369 53.9331 li
177.988 53.2813 li
176.06 54.9253 li
175.947 57.6182 li
177.761 59.4038 li
180.17 58.979 li
181.389 56.6543 li
180.51 54.1313 li
178.186 53.3096 li
176.145 54.812 li
175.947 57.5049 li
177.705 59.3472 li
180.114 58.9502 li
181.333 56.626 li
180.454 54.1313 li
178.101 53.3662 li
176.145 54.9536 li
176.06 57.6465 li
177.931 59.3755 li
180.284 58.7803 li
181.304 56.3145 li
180.17 53.9331 li
177.761 53.5078 li
176.003 55.3506 li
176.287 58.0435 li
178.384 59.4038 li
180.624 58.355 li
181.191 55.7471 li
179.66 53.6494 li
177.222 53.8198 li
175.89 56.0591 li
176.769 58.582 li
179.093 59.2905 li
180.993 57.6182 li
180.879 54.9536 li
178.867 53.4795 li
176.598 54.4434 li
176.003 57.0513 li
177.562 59.0923 li
179.972 58.8652 li
181.191 56.5693 li
180.199 54.103 li
177.818 53.6211 li
176.088 55.4922 li
176.485 58.1567 li
178.696 59.2905 li
180.765 57.9014 li
180.936 55.2373 li
179.037 53.5645 li
176.741 54.3867 li
176.032 56.9663 li
177.59 59.0356 li
76.479 167.914 mo
78.4629 167.007 li
78.4629 169.36 li
76.479 168.481 li
77.9526 166.78 li
78.8315 168.963 li
76.7056 169.048 li
77.4141 166.809 li
79.0298 168.368 li
77.1309 169.445 li
76.9038 167.093 li
78.9731 167.744 li
77.6978 169.644 li
76.564 167.631 li
78.6333 167.178 li
78.293 169.502 li
76.4507 168.312 li
78.0947 166.809 li
78.7749 169.048 li
76.6489 168.991 li
77.4424 166.78 li
79.0298 168.368 li
77.1309 169.474 li
76.8472 167.121 li
78.9448 167.631 li
77.811 169.644 li
76.479 167.772 li
78.5195 167.007 li
78.4912 169.389 li
76.479 168.595 li
77.811 166.724 li
78.9731 168.765 li
76.8755 169.304 li
77.0742 166.922 li
79.0298 167.914 li
77.5845 169.644 li
76.5356 167.546 li
78.6616 167.149 li
78.3496 169.502 li
76.4224 168.453 li
77.9243 166.724 li
78.9448 168.85 li
76.8188 169.275 li
77.1025 166.894 li
79.0581 167.914 li
77.5845 169.672 li
76.5073 167.603 li
78.6333 167.063 li
78.4629 169.474 li
76.4507 168.595 li
77.7827 166.695 li
79.0298 168.68 li
76.9604 169.417 li
76.9038 167.007 li
79.0015 167.631 li
77.8677 169.7 li
76.4219 167.914 li
78.3496 166.865 li
78.7466 169.219 li
76.5923 168.991 li
77.3857 166.752 li
79.1147 168.198 li
77.3857 169.644 li
76.564 167.433 li
78.7183 167.149 li
78.4063 169.53 li
76.4219 168.566 li
77.7827 166.667 li
79.0581 168.623 li
77.0459 169.502 li
76.7622 167.121 li
78.9448 167.433 li
78.123 169.672 li
76.3652 168.227 li
78.0376 166.695 li
78.9731 168.878 li
76.8472 169.36 li
76.9321 166.95 li
79.0298 167.631 li
77.9243 169.729 li
76.3652 168.056 li
78.1797 166.724 li
78.9165 169.02 li
76.7622 169.275 li
77.0171 166.865 li
79.0581 167.688 li
77.896 169.729 li
76.3369 168.027 li
78.208 166.724 li
78.9448 169.02 li
76.7622 169.304 li
76.9604 166.894 li
79.0581 167.631 li
77.981 169.729 li
76.3369 168.141 li
78.0942 166.667 li
79.0298 168.878 li
76.8755 169.445 li
76.8188 167.007 li
78.9731 167.404 li
78.1797 169.7 li
76.3369 168.396 li
77.8394 166.61 li
79.1147 168.595 li
77.1309 169.615 li
76.5923 167.263 li
78.7749 167.092 li
78.5195 169.53 li
76.4219 168.793 li
77.4424 166.639 li
79.1714 168.141 li
77.5562 169.785 li
76.3652 167.716 li
78.4063 166.78 li
78.8882 169.161 li
76.6772 169.304 li
76.9321 166.865 li
79.0581 167.518 li
78.123 169.757 li
76.3086 168.368 li
77.811 166.582 li
79.1714 168.51 li
77.2441 169.7 li
76.479 167.404 li
78.6333 166.922 li
78.7466 169.36 li
76.5356 169.133 li
77.0742 166.752 li
79.1147 167.659 li
78.0376 169.785 li
76.2803 168.283 li
77.8394 166.554 li
79.2002 168.538 li
77.2441 169.729 li
76.4219 167.461 li
78.5762 166.837 li
78.8599 169.275 li
76.6206 169.275 li
76.9038 166.837 li
79.0581 167.433 li
78.2646 169.729 li
76.3086 168.595 li
77.5273 166.554 li
79.2285 168.17 li
77.6128 169.842 li
76.2803 167.886 li
78.1797 166.61 li
79.1147 168.85 li
77.0171 169.644 li
76.5073 167.234 li
78.7183 166.922 li
78.8032 169.389 li
76.564 169.247 li
76.9038 166.809 li
79.0864 167.404 li
78.3496 169.729 li
76.3086 168.736 li
77.3857 166.554 li
79.2568 167.942 li
77.8394 169.87 li
76.2236 168.198 li
77.8677 166.497 li
79.2568 168.453 li
77.3857 169.842 li
76.2803 167.688 li
78.293 166.61 li
79.1431 168.906 li
76.9888 169.7 li
76.4502 167.291 li
78.6333 166.809 li
78.9448 169.275 li
76.7056 169.474 li
76.6489 166.979 li
78.9165 167.063 li
78.7183 169.559 li
76.4785 169.189 li
76.9038 166.752 li
79.0864 167.319 li
78.4629 169.729 li
76.3369 168.935 li
77.1309 166.61 li
79.1997 167.574 li
78.2646 169.842 li
76.252 168.708 li
77.3291 166.525 li
79.2568 167.772 li
78.0659 169.898 li
76.1953 168.51 li
77.499 166.469 li
79.3135 167.942 li
77.9243 169.927 li
76.167 168.368 li
77.6128 166.44 li
79.3135 168.056 li
77.8394 169.955 li
76.1387 168.283 li
77.6694 166.44 li
79.3418 168.142 li
77.7827 169.955 li
76.1387 168.255 li
77.6978 166.412 li
79.3418 168.142 li
77.811 169.983 li
76.1387 168.283 li
77.6694 166.412 li
79.3418 168.084 li
77.8677 169.983 li
76.1387 168.34 li
77.5845 166.412 li
79.3418 167.971 li
77.9526 169.983 li
76.1387 168.481 li
77.4424 166.412 li
79.3418 167.829 li
78.1226 169.955 li
76.167 168.68 li
77.2725 166.469 li
79.2852 167.603 li
78.3213 169.898 li
76.2236 168.906 li
77.0454 166.554 li
79.2002 167.348 li
78.5762 169.785 li
76.3652 169.189 li
76.7905 166.695 li
79.0298 167.063 li
78.8315 169.587 li
76.564 169.474 li
76.5356 166.95 li
78.8032 166.78 li
79.0864 169.275 li
76.8472 169.757 li
76.2803 167.291 li
78.4629 166.525 li
79.2852 168.878 li
77.2441 169.955 li
76.1104 167.772 li
78.0093 166.355 li
79.4268 168.368 li
77.7261 170.068 li
76.0537 168.312 li
77.499 166.355 li
79.3984 167.772 li
78.2646 169.983 li
76.167 168.935 li
76.9604 166.525 li
79.1714 167.178 li
78.8032 169.672 li
76.5068 169.502 li
76.4502 166.95 li
78.7183 166.639 li
79.2285 169.133 li
77.0454 169.927 li
76.1104 167.631 li
78.0942 166.327 li
79.4551 168.368 li
77.7544 170.097 li
76.0249 168.425 li
77.3291 166.327 li
79.3701 167.518 li
78.5195 169.898 li
76.3086 169.275 li
76.5923 166.752 li
78.9165 166.752 li
79.1714 169.304 li
76.9321 169.898 li
76.1104 167.518 li
78.1226 166.299 li
79.4834 168.368 li
77.8394 170.153 li
76.0249 168.566 li
77.1875 166.355 li
79.3135 167.319 li
78.7466 169.813 li
76.4502 169.53 li
76.3652 166.979 li
78.6333 166.497 li
79.3984 168.906 li
77.3574 170.125 li
75.9683 168.084 li
77.5845 166.242 li
79.4551 167.688 li
78.4629 170.012 li
76.252 169.275 li
76.5356 166.724 li
78.8315 166.639 li
79.3135 169.133 li
77.1592 170.097 li
75.9683 167.886 li
77.6978 166.186 li
79.5117 167.801 li
78.4063 170.068 li
76.1953 169.275 li
76.5073 166.724 li
78.8315 166.582 li
79.3701 169.076 li
77.2441 170.153 li
75.9116 168.027 li
77.5273 166.186 li
79.4834 167.574 li
78.6333 169.983 li
76.3369 169.502 li
76.3086 166.922 li
78.5762 166.384 li
79.5117 168.736 li
77.6411 170.239 li
75.9116 168.51 li
77.1025 166.271 li
79.3135 167.093 li
79.0581 169.644 li
76.7339 169.927 li
75.9966 167.489 li
77.981 166.157 li
79.5967 168.027 li
78.3213 170.182 li
76.1387 169.247 li
76.4502 166.695 li
78.7749 166.44 li
79.5117 168.906 li
77.5273 170.268 li
75.855 168.453 li
77.0737 166.242 li
79.3135 167.007 li
79.1431 169.587 li
76.8472 170.04 li
75.8833 167.688 li
77.7261 166.101 li
79.5967 167.659 li
78.6616 170.04 li
76.3369 169.644 li
76.1104 167.064 li
78.3213 166.157 li
79.6533 168.283 li
78.1514 170.268 li
76.0254 169.19 li
76.4219 166.61 li
78.7749 166.384 li
79.5967 168.821 li
77.6978 170.353 li
75.855 168.736 li
76.7622 166.327 li
79.0864 166.639 li
79.4551 169.219 li
77.3291 170.324 li
75.7983 168.368 li
77.0454 166.157 li
79.3135 166.894 li
79.3135 169.502 li
77.0742 170.239 li
75.77 168.085 li
77.2725 166.072 li
79.4551 167.093 li
79.2002 169.672 li
76.9038 170.182 li
75.77 167.886 li
77.4141 166.016 li
79.5117 167.206 li
79.1431 169.757 li
76.8188 170.153 li
75.77 167.829 li
77.4424 165.987 li
79.54 167.206 li
79.1431 169.785 li
76.8188 170.183 li
75.7417 167.857 li
77.3857 165.987 li
79.5117 167.121 li
79.2285 169.729 li
76.9321 170.268 li
75.7134 167.999 li
77.2441 166.016 li
79.4551 166.95 li
79.3701 169.559 li
77.1025 170.353 li
75.6851 168.255 li
76.9888 166.072 li
79.2852 166.695 li
79.54 169.304 li
77.4141 170.466 li
75.7134 168.651 li
76.6772 166.242 li
79.0298 166.384 li
79.7104 168.906 li
77.8394 170.494 li
75.8267 169.105 li
76.2803 166.525 li
78.6333 166.101 li
79.8237 168.368 li
78.3496 170.409 li
76.082 169.644 li
75.9116 167.008 li
78.0659 165.901 li
79.7954 167.688 li
78.9448 170.126 li
76.564 170.154 li
75.6567 167.716 li
77.3574 165.874 li
79.54 166.923 li
79.4834 169.559 li
77.2441 170.494 li
75.6284 168.595 li
76.6206 166.186 li
78.9731 166.271 li
79.8521 168.708 li
78.1226 170.551 li
75.9399 169.502 li
75.9399 166.865 li
78.1226 165.845 li
79.8521 167.659 li
79.0298 170.126 li
76.6489 170.296 li
75.5718 167.942 li
77.0737 165.901 li
79.3701 166.582 li
79.7388 169.19 li
77.7261 170.636 li
75.7417 169.19 li
76.082 166.582 li
78.3779 165.845 li
79.937 167.886 li
78.9165 170.268 li
76.5352 170.268 li
75.5435 167.857 li
77.0737 165.845 li
79.3984 166.525 li
79.7954 169.133 li
77.8677 170.664 li
75.77 169.389 li
75.9116 166.724 li
78.1514 165.731 li
79.9087 167.518 li
79.2285 170.068 li
76.8755 170.522 li
75.4868 168.368 li
76.5923 166.015 li
79.0015 166.101 li
79.9937 168.51 li
78.5195 170.579 li
76.167 170.04 li
75.5435 167.461 li
77.3291 165.703 li
79.5684 166.667 li
79.8237 169.304 li
77.811 170.749 li
75.7134 169.445 li
75.7983 166.78 li
77.981 165.646 li
79.8804 167.234 li
79.5117 169.842 li
77.2441 170.721 li
75.4868 168.906 li
76.1104 166.327 li
78.4346 165.731 li
80.0503 167.688 li
79.2285 170.21 li
76.8755 170.607 li
75.4014 168.51 li
76.3652 166.072 li
78.7466 165.816 li
80.1069 168.027 li
79.0298 170.409 li
76.6489 170.522 li
75.3447 168.283 li
76.5068 165.93 li
78.8882 165.873 li
80.1353 168.169 li
78.9731 170.494 li
76.564 170.522 li
75.3164 168.227 li
76.5068 165.901 li
78.8882 165.845 li
80.1636 168.112 li
79.0298 170.466 li
76.6489 170.607 li
75.3164 168.368 li
76.3369 165.958 li
78.7466 165.731 li
80.1636 167.886 li
79.2568 170.353 li
76.8755 170.749 li
75.3164 168.708 li
76.082 166.186 li
78.4063 165.562 li
80.1353 167.433 li
79.5967 170.04 li
77.3008 170.919 li
75.4297 169.247 li
75.7134 166.582 li
77.896 165.42 li
79.937 166.837 li
79.9653 169.53 li
77.9243 170.976 li
75.7417 169.898 li
75.373 167.234 li
77.1592 165.448 li
79.5117 166.157 li
80.2485 168.708 li
78.7183 170.806 li
76.3369 170.551 li
75.1748 168.198 li
76.3086 165.816 li
78.7183 165.562 li
80.2769 167.631 li
79.5684 170.211 li
77.2725 171.004 li
75.373 169.36 li
75.5435 166.667 li
77.6123 165.307 li
79.8237 166.44 li
80.2202 169.076 li
78.4912 170.976 li
76.1104 170.494 li
75.1182 168.027 li
76.3369 165.731 li
78.7749 165.505 li
80.334 167.546 li
79.71 170.153 li
77.4424 171.117 li
75.4297 169.644 li
75.3164 166.95 li
77.2158 165.278 li
79.5684 166.016 li
80.4189 168.538 li
79.0864 170.777 li
76.6489 170.919 li
75.1182 168.85 li
75.6851 166.242 li
77.9243 165.193 li
80.022 166.554 li
80.3052 169.247 li
78.5479 171.089 li
76.1387 170.664 li
75.0044 168.283 li
76.0249 165.816 li
78.3779 165.222 li
80.2485 166.95 li
80.1919 169.644 li
78.208 171.23 li
75.8833 170.466 li
74.9761 167.971 li
76.1953 165.618 li
78.6045 165.25 li
80.3623 167.093 li
80.1636 169.785 li
78.1226 171.288 li
75.7983 170.466 li
74.9194 167.942 li
76.1387 165.618 li
78.5479 165.165 li
80.3623 166.979 li
80.2485 169.672 li
78.3213 171.288 li
75.9399 170.664 li
74.8628 168.227 li
75.8833 165.76 li
78.2075 165.052 li
80.2202 166.582 li
80.4756 169.275 li
78.7749 171.202 li
76.3369 171.032 li
74.8911 168.85 li
75.4297 166.214 li
77.6123 164.967 li
79.8804 165.958 li
80.6738 168.51 li
79.4551 170.862 li
77.0454 171.373 li
75.1182 169.729 li
74.9761 167.035 li
76.7056 165.108 li
79.1431 165.278 li
80.6455 167.404 li
80.2202 170.068 li
78.1226 171.486 li
75.7983 170.749 li
74.7212 168.283 li
75.6284 165.788 li
77.9243 164.853 li
80.1069 166.072 li
80.7588 168.708 li
79.4551 171.004 li
77.0454 171.515 li
75.0898 169.898 li
74.8062 167.178 li
76.3936 165.108 li
78.8315 164.995 li
80.6172 166.865 li
80.5889 169.587 li
78.7749 171.458 li
76.3369 171.288 li
74.7495 169.219 li
75.0044 166.525 li
76.9321 164.824 li
79.3418 165.193 li
80.8154 167.376 li
80.4189 170.068 li
78.4346 171.628 li
75.9966 171.146 li
74.6079 168.906 li
75.0615 166.242 li
77.1021 164.711 li
79.5117 165.222 li
80.9009 167.461 li
80.4473 170.153 li
78.4346 171.713 li
76.0249 171.259 li
74.5796 169.048 li
74.9478 166.355 li
76.9038 164.683 li
79.3418 165.023 li
80.8726 167.12 li
80.6738 169.842 li
78.8599 171.656 li
76.3936 171.543 li
74.6646 169.615 li
74.6362 166.865 li
76.2803 164.853 li
78.7466 164.654 li
80.6455 166.355 li
81.0142 169.048 li
79.625 171.315 li
77.2158 171.911 li
75.0898 170.551 li
74.3525 167.942 li
75.373 165.477 li
77.6411 164.399 li
79.9653 165.307 li
81.1558 167.716 li
80.5889 170.353 li
78.5479 171.911 li
76.1104 171.6 li
74.4946 169.53 li
74.4946 166.809 li
76.1104 164.768 li
78.5762 164.428 li
80.6172 165.958 li
81.2407 168.595 li
80.1636 171.061 li
77.896 172.109 li
75.5435 171.288 li
74.2393 168.963 li
74.6362 166.271 li
76.4785 164.484 li
78.9448 164.456 li
80.8442 166.186 li
81.2974 168.878 li
80.0786 171.259 li
77.7827 172.223 li
75.4297 171.315 li
74.1543 168.991 li
74.5229 166.271 li
76.3369 164.428 li
78.8032 164.286 li
80.7876 165.901 li
81.4395 168.538 li
80.4189 171.032 li
78.2363 172.308 li
75.7983 171.741 li
74.2109 169.644 li
74.1543 166.894 li
75.6567 164.711 li
78.0376 164.003 li
80.3057 165.108 li
81.4961 167.518 li
81.0991 170.21 li
79.2852 172.081 li
76.8188 172.337 li
74.7212 170.862 li
73.8706 168.283 li
74.6079 165.646 li
76.6206 164.06 li
79.1147 164.145 li
81.0425 165.873 li
81.666 168.538 li
80.7021 171.061 li
78.5762 172.479 li
76.1104 172.194 li
74.2676 170.353 li
73.7856 167.659 li
74.8345 165.165 li
76.9888 163.833 li
79.4551 164.173 li
81.269 166.016 li
81.751 168.736 li
80.7305 171.231 li
78.6045 172.62 li
76.1387 172.365 li
74.2393 170.579 li
73.644 167.914 li
74.5229 165.335 li
76.5923 163.804 li
79.0581 163.833 li
81.0708 165.448 li
81.9214 168.028 li
81.269 170.692 li
79.3984 172.479 li
76.9321 172.79 li
74.7495 171.515 li
73.5591 169.077 li
73.814 166.327 li
75.4014 164.229 li
77.7827 163.436 li
80.1636 164.258 li
81.751 166.384 li
81.978 169.134 li
80.8442 171.571 li
78.6899 172.932 li
76.1953 172.733 li
74.2109 171.089 li
73.332 168.51 li
73.8706 165.816 li
75.6284 163.861 li
78.0659 163.266 li
80.3906 164.229 li
81.9214 166.384 li
82.1479 169.134 li
81.0425 171.6 li
78.9165 173.045 li
76.4502 173.017 li
74.3242 171.571 li
73.2471 169.076 li
73.4741 166.327 li
74.9478 164.116 li
77.2441 163.096 li
79.7104 163.521 li
81.6094 165.307 li
82.4033 167.914 li
81.8931 170.636 li
80.1919 172.648 li
77.811 173.442 li
75.4014 172.79 li
73.6157 170.862 li
72.9639 168.198 li
73.5874 165.505 li
75.3447 163.549 li
77.7544 162.841 li
80.1636 163.521 li
81.9497 165.448 li
82.6299 168.113 li
82.063 170.806 li
80.3623 172.818 li
77.981 173.669 li
75.5435 173.13 li
73.644 171.345 li
72.7651 168.765 li
73.1055 166.044 li
74.6079 163.804 li
76.8755 162.67 li
79.3418 162.841 li
81.4678 164.314 li
82.6865 166.724 li
228.983 11.6685 mo
226.97 11.6685 li
228.983 22.8652 mo
226.97 22.8652 li
228.983 34.0337 mo
226.97 34.0337 li
228.983 45.2305 mo
226.97 45.2305 li
228.983 67.5679 mo
226.97 67.5679 li
228.983 78.7646 mo
226.97 78.7646 li
228.983 89.9331 mo
226.97 89.9331 li
228.983 101.13 mo
226.97 101.13 li
228.983 123.467 mo
226.97 123.467 li
228.983 134.664 mo
226.97 134.664 li
228.983 145.832 mo
226.97 145.832 li
228.983 157.029 mo
226.97 157.029 li
228.983 179.366 mo
226.97 179.366 li
228.983 190.563 mo
226.97 190.563 li
228.983 201.731 mo
226.97 201.731 li
228.983 212.929 mo
226.97 212.929 li
228.983 .5 mo
224.958 .5 li
228.983 56.3994 mo
224.958 56.3994 li
228.983 112.298 mo
224.958 112.298 li
228.983 168.198 mo
224.958 168.198 li
228.983 224.097 mo
224.958 224.097 li
228.983 224.097 mo
228.983 .5 li
27.3262 11.6685 mo
29.3384 11.6685 li
27.3262 22.8652 mo
29.3384 22.8652 li
27.3262 34.0337 mo
29.3384 34.0337 li
27.3262 45.2305 mo
29.3384 45.2305 li
27.3262 67.5679 mo
29.3384 67.5679 li
27.3262 78.7646 mo
29.3384 78.7646 li
27.3262 89.9331 mo
29.3384 89.9331 li
27.3262 101.13 mo
29.3384 101.13 li
27.3262 123.467 mo
29.3384 123.467 li
27.3262 134.664 mo
29.3384 134.664 li
27.3262 145.832 mo
29.3384 145.832 li
27.3262 157.029 mo
29.3384 157.029 li
27.3262 179.366 mo
29.3384 179.366 li
27.3262 190.563 mo
29.3384 190.563 li
27.3262 201.731 mo
29.3384 201.731 li
27.3262 212.929 mo
29.3384 212.929 li
20.2109 .52832 mo
19.2188 .868652 li
18.5386 1.86035 li
18.2266 3.50488 li
18.2266 4.49707 li
18.5386 6.16943 li
19.2188 7.16113 li
20.2109 7.47314 li
20.8628 7.47314 li
21.855 7.16113 li
22.5356 6.16943 li
22.8472 4.49707 li
22.8472 3.50488 li
22.5356 1.86035 li
21.855 .868652 li
20.8628 .52832 li
20.2109 .52832 li
15.562 6.82129 mo
15.2505 7.16113 li
15.562 7.47314 li
15.9023 7.16113 li
15.562 6.82129 li
9.26904 1.86035 mo
9.94971 1.52051 li
10.9419 .52832 li
10.9419 7.47314 li
27.3262 .5 mo
31.3511 .5 li
22.1953 53.4229 mo
18.8789 53.4229 li
18.5386 56.4277 li
18.8789 56.0874 li
19.8706 55.7471 li
20.8628 55.7471 li
21.855 56.0874 li
22.5356 56.7393 li
22.8472 57.7314 li
22.8472 58.4121 li
22.5356 59.4038 li
21.855 60.0562 li
20.8628 60.396 li
19.8706 60.396 li
18.8789 60.0562 li
18.5386 59.7158 li
18.2266 59.064 li
15.562 59.7158 mo
15.2505 60.0562 li
15.562 60.396 li
15.9023 60.0562 li
15.562 59.7158 li
10.2612 53.4229 mo
9.26904 53.7632 li
8.61719 54.7549 li
8.27686 56.4277 li
8.27686 57.4199 li
8.61719 59.064 li
9.26904 60.0557 li
10.2612 60.396 li
10.9419 60.396 li
11.9336 60.0557 li
12.5859 59.064 li
12.9258 57.4199 li
12.9258 56.4277 li
12.5859 54.7549 li
11.9336 53.7632 li
10.9419 53.4229 li
10.2612 53.4229 li
27.3262 56.3994 mo
31.3511 56.3994 li
20.2109 109.322 mo
19.2188 109.662 li
18.5386 110.654 li
18.2266 112.327 li
18.2266 113.319 li
18.5386 114.963 li
19.2188 115.955 li
20.2109 116.295 li
20.8628 116.295 li
21.855 115.955 li
22.5356 114.963 li
22.8472 113.319 li
22.8472 112.327 li
22.5356 110.654 li
21.855 109.662 li
20.8628 109.322 li
20.2109 109.322 li
15.562 115.615 mo
15.2505 115.955 li
15.562 116.295 li
15.9023 115.955 li
15.562 115.615 li
10.2612 109.322 mo
9.26904 109.662 li
8.61719 110.654 li
8.27686 112.327 li
8.27686 113.319 li
8.61719 114.963 li
9.26904 115.955 li
10.2612 116.295 li
10.9419 116.295 li
11.9336 115.955 li
12.5859 114.963 li
12.9258 113.319 li
12.9258 112.327 li
12.5859 110.654 li
11.9336 109.662 li
10.9419 109.322 li
10.2612 109.322 li
27.3262 112.298 mo
31.3511 112.298 li
22.1953 165.222 mo
18.8789 165.222 li
18.5386 168.227 li
18.8789 167.886 li
19.8706 167.546 li
20.8628 167.546 li
21.855 167.886 li
22.5356 168.538 li
22.8472 169.53 li
22.8472 170.21 li
22.5356 171.202 li
21.855 171.854 li
20.8628 172.194 li
19.8706 172.194 li
18.8789 171.854 li
18.5386 171.515 li
18.2266 170.862 li
15.562 171.515 mo
15.2505 171.854 li
15.562 172.194 li
15.9023 171.854 li
15.562 171.515 li
10.2612 165.222 mo
9.26904 165.562 li
8.61719 166.554 li
8.27686 168.227 li
8.27686 169.219 li
8.61719 170.862 li
9.26904 171.854 li
10.2612 172.194 li
10.9419 172.194 li
11.9336 171.854 li
12.5859 170.862 li
12.9258 169.219 li
12.9258 168.227 li
12.5859 166.554 li
11.9336 165.562 li
10.9419 165.222 li
10.2612 165.222 li
0 169.219 mo
5.95264 169.219 li
27.3262 168.198 mo
31.3511 168.198 li
20.2109 217.152 mo
19.2188 217.464 li
18.5386 218.456 li
18.2266 220.129 li
18.2266 221.121 li
18.5386 222.765 li
19.2188 223.757 li
20.2109 224.097 li
20.8628 224.097 li
21.855 223.757 li
22.5356 222.765 li
22.8472 221.121 li
22.8472 220.129 li
22.5356 218.456 li
21.855 217.464 li
20.8628 217.152 li
20.2109 217.152 li
15.562 223.445 mo
15.2505 223.757 li
15.562 224.097 li
15.9023 223.757 li
15.562 223.445 li
9.26904 218.456 mo
9.94971 218.145 li
10.9419 217.152 li
10.9419 224.097 li
0 221.121 mo
5.95264 221.121 li
27.3262 224.097 mo
31.3511 224.097 li
27.3262 224.097 mo
27.3262 .5 li
218.891 .5 mo
218.891 2.73926 li
208.829 .5 mo
208.829 2.73926 li
198.737 .5 mo
198.737 2.73926 li
188.646 .5 mo
188.646 2.73926 li
168.492 .5 mo
168.492 2.73926 li
158.4 .5 mo
158.4 2.73926 li
148.309 .5 mo
148.309 2.73926 li
138.246 .5 mo
138.246 2.73926 li
118.063 .5 mo
118.063 2.73926 li
108 .5 mo
108 2.73926 li
97.9087 .5 mo
97.9087 2.73926 li
87.8174 .5 mo
87.8174 2.73926 li
67.6631 .5 mo
67.6631 2.73926 li
57.5718 .5 mo
57.5718 2.73926 li
47.4805 .5 mo
47.4805 2.73926 li
37.4175 .5 mo
37.4175 2.73926 li
228.983 .5 mo
228.983 4.97852 li
178.583 .5 mo
178.583 4.97852 li
128.155 .5 mo
128.155 4.97852 li
77.7544 .5 mo
77.7544 4.97852 li
27.3262 .5 mo
27.3262 4.97852 li
27.3262 .5 mo
228.983 .5 li
218.891 224.097 mo
218.891 221.857 li
208.829 224.097 mo
208.829 221.857 li
198.737 224.097 mo
198.737 221.857 li
188.646 224.097 mo
188.646 221.857 li
168.492 224.097 mo
168.492 221.857 li
158.4 224.097 mo
158.4 221.857 li
148.309 224.097 mo
148.309 221.857 li
138.246 224.097 mo
138.246 221.857 li
118.063 224.097 mo
118.063 221.857 li
108 224.097 mo
108 221.857 li
97.9087 224.097 mo
97.9087 221.857 li
87.8174 224.097 mo
87.8174 221.857 li
67.6631 224.097 mo
67.6631 221.857 li
57.5718 224.097 mo
57.5718 221.857 li
47.4805 224.097 mo
47.4805 221.857 li
37.4175 224.097 mo
37.4175 221.857 li
233.292 232.119 mo
232.299 232.431 li
231.648 233.423 li
231.307 235.096 li
231.307 236.088 li
231.648 237.731 li
232.299 238.724 li
233.292 239.064 li
233.944 239.064 li
234.936 238.724 li
235.616 237.731 li
235.928 236.088 li
235.928 235.096 li
235.616 233.423 li
234.936 232.431 li
233.944 232.119 li
233.292 232.119 li
228.643 238.412 mo
228.331 238.724 li
228.643 239.064 li
228.983 238.724 li
228.643 238.412 li
222.35 233.423 mo
223.03 233.111 li
224.022 232.119 li
224.022 239.064 li
228.983 224.097 mo
228.983 219.618 li
184.875 232.119 mo
181.559 232.119 li
181.219 235.096 li
181.559 234.756 li
182.551 234.415 li
183.543 234.415 li
184.536 234.756 li
185.188 235.407 li
185.528 236.399 li
185.528 237.08 li
185.188 238.072 li
184.536 238.724 li
183.543 239.064 li
182.551 239.064 li
181.559 238.724 li
181.219 238.412 li
180.879 237.731 li
178.243 238.412 mo
177.903 238.724 li
178.243 239.064 li
178.583 238.724 li
178.243 238.412 li
172.942 232.119 mo
171.95 232.431 li
171.269 233.423 li
170.958 235.096 li
170.958 236.088 li
171.269 237.731 li
171.95 238.724 li
172.942 239.064 li
173.594 239.064 li
174.586 238.724 li
175.266 237.731 li
175.579 236.088 li
175.579 235.096 li
175.266 233.423 li
174.586 232.431 li
173.594 232.119 li
172.942 232.119 li
178.583 224.097 mo
178.583 219.618 li
132.463 232.119 mo
131.471 232.431 li
130.819 233.423 li
130.479 235.096 li
130.479 236.088 li
130.819 237.731 li
131.471 238.724 li
132.463 239.064 li
133.115 239.064 li
134.107 238.724 li
134.788 237.731 li
135.099 236.088 li
135.099 235.096 li
134.788 233.423 li
134.107 232.431 li
133.115 232.119 li
132.463 232.119 li
127.814 238.412 mo
127.502 238.724 li
127.814 239.064 li
128.155 238.724 li
127.814 238.412 li
122.513 232.119 mo
121.521 232.431 li
120.87 233.423 li
120.529 235.096 li
120.529 236.088 li
120.87 237.731 li
121.521 238.724 li
122.513 239.064 li
123.194 239.064 li
124.186 238.724 li
124.838 237.731 li
125.178 236.088 li
125.178 235.096 li
124.838 233.423 li
124.186 232.431 li
123.194 232.119 li
122.513 232.119 li
128.155 224.097 mo
128.155 219.618 li
88.3276 232.119 mo
85.0396 232.119 li
84.6992 235.096 li
85.0396 234.756 li
86.0317 234.415 li
87.0239 234.415 li
88.0156 234.756 li
88.668 235.407 li
89.0078 236.399 li
89.0078 237.08 li
88.668 238.072 li
88.0156 238.724 li
87.0239 239.064 li
86.0317 239.064 li
85.0396 238.724 li
84.6992 238.412 li
84.3589 237.731 li
81.7231 238.412 mo
81.3828 238.724 li
81.7231 239.064 li
82.0347 238.724 li
81.7231 238.412 li
76.4219 232.119 mo
75.4302 232.431 li
74.7495 233.423 li
74.438 235.096 li
74.438 236.088 li
74.7495 237.731 li
75.4302 238.724 li
76.4219 239.064 li
77.0742 239.064 li
78.0659 238.724 li
78.7466 237.731 li
79.0581 236.088 li
79.0581 235.096 li
78.7466 233.423 li
78.0659 232.431 li
77.0742 232.119 li
76.4219 232.119 li
66.1606 236.088 mo
72.1133 236.088 li
77.7544 224.097 mo
77.7544 219.618 li
35.9434 232.119 mo
34.9512 232.431 li
34.271 233.423 li
33.959 235.096 li
33.959 236.088 li
34.271 237.731 li
34.9512 238.724 li
35.9434 239.064 li
36.5952 239.064 li
37.5874 238.724 li
38.2676 237.731 li
38.5796 236.088 li
38.5796 235.096 li
38.2676 233.423 li
37.5874 232.431 li
36.5952 232.119 li
35.9434 232.119 li
31.2944 238.412 mo
30.9824 238.724 li
31.2944 239.064 li
31.6348 238.724 li
31.2944 238.412 li
25.0015 233.423 mo
25.6816 233.111 li
26.6738 232.119 li
26.6738 239.064 li
15.7324 236.088 mo
21.6851 236.088 li
27.3262 224.097 mo
27.3262 219.618 li
27.3262 224.097 mo
228.983 224.097 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 1 cmyk
@
[1.13386 2.83465 ] 0 dsh
128.155 224.097 mo
128.155 .5 li
27.3262 112.298 mo
228.983 112.298 li
@
[] 0 dsh
177.449 39.9297 mo
171.156 46.2227 li
174.302 43.0762 li
171.156 39.9302 li
177.449 46.2227 li
180.51 70.771 mo
174.217 77.064 li
177.364 73.9175 li
174.217 70.771 li
180.51 77.064 li
176.202 31.1709 mo
169.909 37.4639 li
173.055 34.3174 li
169.909 31.1709 li
176.202 37.4639 li
209.934 60.1694 mo
203.641 66.4624 li
206.788 63.3159 li
203.641 60.1694 li
209.934 66.4624 li
180.936 101.924 mo
174.643 108.217 li
177.79 105.07 li
174.643 101.924 li
180.936 108.217 li
81.666 116.38 mo
75.3735 122.673 li
78.5195 119.527 li
75.3735 116.38 li
81.666 122.673 li
52.6675 158.135 mo
46.375 164.428 li
49.521 161.281 li
46.375 158.135 li
52.6675 164.428 li
86.3999 187.134 mo
80.1069 193.426 li
83.2534 190.279 li
80.1069 187.134 li
86.3999 193.426 li
82.0913 147.533 mo
75.7983 153.826 li
78.9448 150.68 li
75.7983 147.533 li
82.0913 153.826 li
85.1528 178.374 mo
78.8599 184.667 li
82.0063 181.521 li
78.8599 178.374 li
85.1528 184.667 li
@
%ADOBeginSubsetFont: MyriadPro-Regular Initial
%ADOt1write: (1.0.24)12 dict dup begin/FontType 1 def/FontName /MyriadPro-Regular def/FontInfo 7 dict dup begin/Notice (Copyright 1992, 1994, 1997, 2000, 2004 Adobe Systems Incorporated. All rights reserved. Protected by U.S. Patents D454,582. Myriad is either a registered trademark or a trademark of Adobe Systems Incorporated in the United States and/or other countries.) def/Weight (Regular) def/ItalicAngle 0 def/FSType 8 defend def/PaintType 0 def/FontMatrix [0.001 0 0 0.001 0 0] def/Encoding 256 array0 1 255 {1 index exch /.notdef put} fordup 45 /hyphen putdup 46 /period putdup 48 /zero putdup 49 /one putdup 50 /two putdup 53 /five putdup 85 /U putdup 86 /V putdef/FontBBox {-157 -250 1126 952} defendsystemdict begindup /Private12 dict dup begin/|- {def} def/| {put} def/BlueValues [-11 -0 674 686 484 495 650 661 710 721 241 248] def/OtherBlues [438 444 260 266 -209 -198 -153 -147 -118 -112] def/BlueScale 0.0604582 def/StdHW [67] def/StdVW [88] def/StemSnapV [88 92] def/password 5839 def/MinFeature {16 16} def/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def/Subrs 5 arraydup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |dup 1 <1C60D8A8C9C3D06D9E> |dup 2 <1C60D8A8C9C202D79A> |dup 3 <1C60D8A849> |dup 4 <1C60D8A8CC3674F41144B13B77> |defputdup /CharStrings9 dict dup begin/hyphen <1C60D8A8C9B8391507657B8D1429650EAD682B1E1FA8FF445B393CF432> |-/period <1C60D8A8C9B89DB76243241956147685E9D11B558168E06D18275E2338D279B9913C7A1D115D13271EAC> |-/zero <1C60D8A8C9B7BA8F6239473D6D0952B7B27F0FFDEC3D4AC868BB2F3F35FB5E9F1C0F84AF60C7D8EABDB59B8E1F960151F9511E55A6B26091EC60E1C90C277465A6CD6BF415E99C1E3222E5D8229E07EB706E217942A6C6EE460AA0> |-/one <1C60D8A8C9B7BA8F425ECEA255C7F445C46B341EF282C71048D555A5D598E89496E7235E7E5E61E755DE1DD927709B69AF39C5FFA2F961FADB> |-/two <1C60D8A8C9B7BA8F694E6FA15FFB6B382A3EE4F45111A59DACAF941116582617B9738BB5AF1D396C826652BF6DBB46CC2019C22EEDB26045C1BEFE4887D256AE5DA3C25CAA99D62ED97486E7939D89DEC92F35F04285> |-/five <1C60D8A8C9B7BA8F622456C4991FA35B552AABDBA410C5FE2A289D1C4B46CC6EA81B6F378E0E9FBB887620926C1C295BED9DF5CC60E1506BC8F14C40DD7EC5F146AE0B602E11477020F8E0DC1E61B7E5001ACA3564CDADF4245B4EB166D458A0663DB06F2579480E048AFCB0FC> |-/U <1C60D8A8C9B67A40D81BFBD664698F172962E5E1FA1185B63F3290B3666C22108B29923B1DC2E04A6BB03297D059A20638E9439889AA598516C5989124B65198F3D60A7398> |-/V <1C60D8A8C9B7EDAFD30F79AA728C73B6F9D7243B3F3111E28F2A88FF9E5531C99B386BBCEA887616E38278755F3D624761739CBCFEBE737FE4F6B41F26A8CE4C75B9203972AF1AD2A0D0E820> |-/.notdef <1C60D8A8C9B7A73DC56ED86B010528A4AE924D9B6A4AEB6B57364CBBC1FC7743E3F5B16223C8BD8911534CBC6ED69BD6AA5A2C449B7A6EF268B5A0D64C6C74FC81FE7341B7ED82094E8390BB44FFD88AB4DB74763338FA8306E917B17192> |-end putenddup /FontName get exch definefont popend%ADOEndSubsetFont
/HONSWG+MyriadPro-Regular /MyriadPro-Regular findfont ct_VMDictPut/HONSWG+MyriadPro-Regular*1 [45{/.notdef}rp /hyphen /period /.notdef /zero /one /two 2{/.notdef}rp /five 31{/.notdef}rp /U /V 169{/.notdef}rp]HONSWG+MyriadPro-Regular nfHONSWG+MyriadPro-Regular*1 [12 0 0 -12 0 0 ]msf172.14 123.913 mo(0.5)[6.15625 2.4834 0 ]xsh212.14 66.9131 mo(1.0)[6.15625 2.4834 0 ]xsh165.14 25.9131 mo(1.5)[6.15625 2.4834 0 ]xsh172.14 88.9131 mo(2.0)[6.15625 2.4834 0 ]xsh178.386 41.6719 mo(2.5)[6.15625 2.4834 0 ]xsh70.1401 109.913 mo(-0.5)sh29.3511 167.198 mo(-1.0)sh73.1401 205.913 mo(-1.5)sh69.1401 145.913 mo(-2.0)sh59.8252 187.423 mo(-2.5)shHONSWG+MyriadPro-Regular*1 [14 0 0 -14 0 0 ]msf212.14 128.913 mo(U)sh111.14 17.9131 mo(V)sh%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/HONSWG+MyriadPro-Regular*1 uf/HONSWG+MyriadPro-Regular uf/MyriadPro-Regular ufAdobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Viggo Hansteen) ()%%Title: (cornu.eps)%%CreationDate: 5/10/11 12:27%%Canvassize: 16383%AI9_DataStream%Gb!R&GCSnhdO>$B!PSXb,U!_<`HF;9V"^._;Fqu;.g-,hT<k.SmUs9Qa_JgRVX/ZTo</&H"QZgE)GS[O,:*saXa[T[Dgq&[rk04O%/LR\O9&*6aERR`oM8Wa!U=T!iadABg,="%pBXWYgQ&KV7#(!,uHL$(4R_?%&l`Jb*(0Z\uVn3l)BiNs'KZE1TZ\OF!s6eAe<<TpS%;>]Q9.NJQNZJTOYlEt@\BR\id0%V&MEi\e;l,?XKUHkNQ4n&%/NTs+8qmG!XNU&S4MY1V@bZ2.C;-T%?n"b3Cq:=b2CM*pl>'9ia%4mp/hlPY2eXS$n<pBUko8E'@3;!])MFoP[W7sNRr]hYD*D`&W#DNgVlqn(;P6E_p'5LV>CRcW1AgJB]7USn=\=7*WUW:Xhl`0t1I%Ee^=.%8Fr(L8b]L\8S(Dj#7tUe;38r!cQd>JO_9un9enaJ(8?766r\GeXO6QpQJG9XSt\&Rd]l$li2TnU`'Hs#Q./b>kAuCc;h4-%,NQr7464rP<jgLDW3c6ANQR%2B2ep3,QPS/SW?qbnQ)^<#AUB\D;#%0[%ke$[17-5Zs@JHC0b>.=7i#GYt`8qgH+=WkU`IAY%r%#%:ub^h2rp?G6t+fV8j>oG:`InQ)aUQf3((T2g8TSOS#\0!f(3dW?KFOmBlTVii*Kr1iI?X^:XDNnn+CEi(Oa5[Kk"F"P+:Q*d_N%^%`1G4G*Ka(HD#D&-E7mNNe1=XH'i_7oWZButrB%abG7Spr62u$I5'&aZF<(','POJK_d?])Vn*@6Fe(WHQf2fP<\=VR\K(OijT$cs%"/oJ->c)X)%_t%6^c:O"]^7ZYjZ!5Dhr#0@$3br0']@5&!M0u4!)kMfdrII8K=B$8G[<"dG6l1k?\/f&OZ\=Vl#Rk"073g8oEd\^%$Mm/;8tJ>0i"KLk8+6i`VN`4l6D*0LIR0%Q'5A_5+uM`Ki"PqrJ"[SQ"DncdP4en`q?<Jk;_CET*?W(ed$RXl:^K>-S##3MH\+>q%NO01_dkRR.j<$WQs54Q*+sTX)9qIIZK>.BirM(T2W']?prkTu[K&2X[LJNL^Pe\Y363#l,N$@3n6<DT!Zq,HB0W4h9a,JqHW")XW%DNlcLk6-.ISDZii,rO0A+qXAg^d.?:B0u(FD:34j'`&',!(HZ%qF>3chM"aUJ_n?YPd@@U&B^+N#^92gVS#7+%590"6?n(("W^N.%GCgj/3bar-%5=\)6Mj5k#:S:eWL^[tSs+X,F!@$*S&q$2g5m5qp`JI%0(%_j=Fs-qQRk`VcMN:,.Go4GK=<iO;+]rG9W?7V!AL74%KXWs!.'=7kg+K@k]W%n<rWdq0<`In)RRWn<^Z6J=0_i]gP(0`iBp',.Qi+0@nsfY*s(n2&[Vaa,mJb;laV4Z?r7fmJ^\M7-0:""%%8I>Dirfp+:2ucPM.I8/(k:h)K8]I%nVSC2Ze3D2+(hU=WR,tWQj_ZEj4'%JkceG=/Q)l2+XeTf'r*RRq!8]3BgNf9Q$;Yg8PX<b9%g_,6'M'^(Q;mVI7RP[f73e&7EcOei=p#rauKRZibI=Rc*YAED7WhTuij/3*GU;)!JY9Eg42"6a^KM$N#L?UYf7"R6#la2Q5#D3$#%rS#5u@!p'EOM@`Y?sZeQdPh)r-`sCoq'kSXXom:1CEV,KCI;rS-.8Ys?u>>iOu!&jk8Jf@B>4I;d^F&!2H<p65XS34B2R"(g&]2O%@,t/=\5(KR-r)33F.R5nl\"q'D7"0:3j%)S(&(M17/G)/!j>Hl\(CPg_.eq?L!c0o,.C;(5^gGtJ\J*FPkr$'\j9L"DGfX(QcY`,%[s>M3nBKV%*/])Zl=@h@A2+VD]#uiUDS;G;#q!;[11E`+L#*[e3JsXTAH?kf.*q^!TFO*<X:@*Xb!;PTHu##uNt,l"eJO9kYOQ:A%(6Vgehb:-E8NjTHdT^&%.2@@8a@O2&TML@J,<?0!.YHMdjCsU29*$U$#183DNCB]16T[=9\r.SWgZ;_h12FSIl7*6P60gktX`7\+%1a"gr]k]>4/e*gDnjb]?1b<9NQV01c98"MQ>E6Fo'Zi;XWGGO9mo1n]ZnGD9;U/6^>fN!0V%9Jg@>T<TFu@!G5qSr\BOm<!PYqda%&ZM,U;^+7;eV8;SEKO#cU-6Hf1AOn,<6m;SEgYHN`(H-JOh0cVQnrT^2r$Uc#i&l$]GZu,K$E8!;sl0"g/'lP7tCH`IgZ!%[$5WY%_'Dc!<-0NI&K)fo_X37QktFPRC(u"m[Y^:sob/4\2*:F>dOrM%oR_-Cd7K#30XhJaaJ(L9J"]"AHTi?+eZ#E5qZYl5kCET<Yn?XU%mgj0f[n!1R@!b-a8@O_CF8Li?Xdlj\F;TLq\i;la`/&Vj\U\Y#6RX5F!R_4V*"\Q;)!I)A5*T6X2jb7=Y@=N")UV62Z9`=q^<CSj%A"kEf/_h:aWNK*j:W*Rniq=4(2/FJo/o;2<5SmT?k>q.+Te(.YhUQne/[EZgFXQoG80)BVkifP3K'IA>-HR%7qO>Pg*E1f>_JK@H%kG`+WUK(!s#:6D1#W>f!o3PSlg*'F)d2p)*dajOm@Wn>X%,]X(IDCpJ6+?Vk>b`QhCCYpSRZ:QDC5I0c)Rgak+,alk4X&V?C)S+.%I%-+=R!*Y_N4INC7!0<r^B&MB8L.\]C*IT,2QJgiY2NQ0cG.R9RB-T7>:EZHMq1-QQ"`Q`[b5!%`T3TmZR3bBqfjNX`bY/:5tmVG%Jd(l@,uIBo:m36X6u8f9'&SI:QabkP3s/<#mb\YbrnOuJql/;>_F1"_WCCUe^.h'fAQk[8&+<H!`QG^jm1A)?4VYm>!e$_B1-_#j%)tE,t>GAZW[55m4Up";e$Wu&oQNiQbd>p]L]L8lZ`0]!!CYUsI$dALbXW\`QQcb2]hd#BN/"s+n0Y:Cu>$B:P=Pf/kE8*h<pALW/%2VE<6q%7ltrtEVUInKAYn^NDdTU(#qJ)YGW@O1tLl=I9I\0^STND)>mZk&0YUW%3Znr2=Ad20cJ]0p?:p4@VZm/I^mc\5C^']XAT%kPm<gaJ(>+d2<I/O'>&g>buSTgeM[aM^-]lZ?P^,N$H@FBYQuc"kW/Bf8qBdPq&NUfVi9Z"D]@-7kt@jg90dF>S@c%M&$<QJTJ*S%Bo+V1g(pUnc\W[&$fs82'm"5P4hriE/-`L^Nd;aOmZB\48Ygo+T,^-aQ`5B/c"^3!D()q9;is^$ePQ0ln2qtBko>2JaBR_qj./JW%/Zl"T'eYg.(`SHP%#g'9g'6Cl23EYV1hX6bdg6_LHVd@ggMj,eD3h9\8^C6S6L9BZ:lZ49fCdaL-l&l%O?<R_0nBqVo5IcC>fr=c%)7^Hb+g`$_25Z"_k2i0ap!*bV&B6eMMk19F3LBQ#K)436%`''&l9TO8U%(1"BMdLd<21A';U%R5k491G99NTG\%@k?qRn,^c!ib.%If6!K80dTE?7L2oFJ`I@pg&JaR`?J9/m<ojeHmB2,$G6AmM-_pb<(Bc(da%X)&Q8=<tqW@mHPIV`[f-CMT6*DMjfHU87gX9`EnpI%\oST7#Fj'%%%)YJ(VsIr/bAcL`0+C:R*/g(7)Ja^PfC2TXph:ub`)\+at=*f73$`2s'0q[L4f70r>+PAUjbVT/7H2rro\=Cm&Njo%#c9?"1oa<a@Q"b)#A9]'7U5m9pIDKe-/s.U<XDEul&HPC$YfTI!Y0a0M_f,C1^\WCKjIC&=GYe"WP?`k$o0In8UOZuT]!)Nr?LhJ%RBkZTT5I3-]!F`k4%Pf9OE9-QNBJjf)FaGecG*"gCiFbhS0&>-K%i.[+3:c,\Q:mk`B=@,pBe;7,:Ig`h!,6Q88:T9,Yj,oVLT^3%g5j:sBT0s+=a$/;@rf><`$49`N>Ql7r$G&If>p([.*85Rjpn-39)4:W4h,5M`<DYE#)t(_8g>Z>N[eN&Vi0aIQd,KnN'cPG%+-V;%[W3X.%,(J5X%R9+_t=8NPKfL`/Sk5e_(t1e\*!tcK*XqukFrW\.U-GgkJYh</\A;_X9P!s*4pF&]uO=h.;oe-9YI*<$VYss3a87>%9/rMf+-miH(OSAi*KNUQ#ed/P'Wj9k3qI[]4JtkqWn5.N@ii4n0'Mib-k4u%JPl0<Meb\jD8:2tK31J/3:Jp`j2a"'WRT(J*%?3r%Y%B"jmr332CBo@eR?nqE5GC0cdN2ahY)UHCFO/`.>ZLE[;tj!p[(IHgr%;=YV4>CS$c>?k26%>CqD\(B>tf9#hV-&<o(a,fCiNM;%p5sjJb>5D#;KhGn_<nYgQ^23#0+4i)<3OCoeFX]@9R@q]7[@[.rp/?*&E6lQ!9<&F?59A&p,sDC(F-7)]NXd.eTtNX)^)9H]+XJ`%2.1H=`]hl0gJTWaYM6Kj^F%P#rlkb<RD^/fr4>Yac@+]^h`^)fH'plEIS1f:j!gnn#.H264fi8+D;(<QB!I<X(p6>=HCX:+)WP;>%=Vg(e_3^uuDT]q#40U-/6J'rERNmMto0H+C]nEni.S:bE:ct'U/-Gi?0`h0rEPXQbj\(KAl&MD#LpL@?%ZsSmB$B#:^B02&rRZ^0%Aa3]&Hphlm\)\*MR*%P1Pk^;!c:$7V:$Uss^0nZ80?;Rc-l-@3\7`^!i2p*Mg06U=-@&t]R(F,?'E&t2mS[Nc?er-e)Q<t$R,dn/%NdI2G'2'TCbpmO;-/T'3DqK-dV-@0M3itm;K03Z$nWV."YMYAra)i^+dr4noh0S[f;2[NHlpmuE<t0>oB(OQ!Xb33eZhY)WS1VD(%WqAiVOtB\jqRp)+UfVJ6CY;Vn(<^$h2_"s+JnrP1hWgZ@rqCc7p?ugO_iXUC\FMR^Gn%M+bLXb82<!((HaQVKY7m;7!)mMa9jE)t%gENjR!o">q>7@r/;!AY?4ot%lcrda&@&oQRO'3o870qIZff)=fCq!L31nYZ@g)Fk5cG&ukNES!iY&o0qmE[>0j1Ea@^,?Of3dBsO%Wi__<CUO31e3?-Dfj:RSXhj/m/AZlpQYEmSe_5@.?cns`)jTi(N"r`>rU+mCg#kWmn)(Nbp:KcFNX`eO^TC9(]nWPe2f%p]]@),n%2rFoEW1\1?oq-]8$_=B-rmf6Drr(EHI,hDd]BX="#'tj6p"jAU_&Yr(UQ:/@p>,!kC@==bMbp/!B[ke`o5;22<m0XI@,tU*F8qK1%/`;b''qpkoIH*PZOV*FiV=Y"l'E@(RUp+&&Wt#QTLrO+Wa1f62.V(q?rD!`1MC!u8NITpP@bLK:lEJGQW9%h7[F;,WKAa#sEqW]$%eej#6#6O:@[ea:J,-brj@*t/,4\n&4`/lJ]dd31gI?@h0):1PJ3[I%h6@H5uVZc":5[9/r>`hNV(o_D^Se^*/"7]ZBlN"\DC':X/%L'<0b1m.!(p9WZSW-%mnNCps@jKR19I:_:cke5WP&l',p&"\8nqqng3p^)7;&h'uQ.Q-*eO:JT8Ii_-PnOZWhcOPP<#@Aae$GV%R%L6-;Kc,B5(ena[)hsFV6?HoIPN5npkcQZQCIeo<6qN8tPS*rmKH@H;8#kYq58:f>A0]MRHVV3L*,#SQWHDOK@^V=DY8&'&t9"*Pi%<Vp]*:"3%"4]$C%HJ?Q5Ib-b5nX/U/=elctW8ageALhWi_S9A-*'7B+20tOtVA_'7,74:?>4\L)f*hh5)i1tq0E;$#D)IokjKG&O%6+UqH)F#I8T:l:<XGPS$)kP^.B8o*$[+f<fg\]7i<br(@-N:%J=Y(Zbe(6fTdj=$ID?9c\frt-bR7b/`%'?Ie`h=.q&(/Sq-iH.)%m:,IrebS@2PL<A#Y?I^O(91pl8?Ur2Ptl[NeRsk6'<qfqB/Ld]O\%[9+<'d]H!,em/%s:(:'7Jr/ut36Pj9Q*_s=p^K=$t?I&GH^%I`?lF=q+N7r.rnk(?8;Cs6jX]%):.OD%ZmZ[c@L7>KV/9s)kFdkhm6'_uJlQ$Pd2nZ(k3Ho4u/)3GXI6)hkQ$-E;:)3BmfrB:p^2%)R[c'Oc/iP<Z=j;WSo=97'(Ji[]T!VUf#,b5:c+>Y-[k*`fQOg650"*W;9Oq_KDS?Sj9knmr,#hA(eaHEdR;:phFX0*\!pX^X7C%%`j7%Xmohgob?ic7OVXf:9)LNC\/P,MICk<_[(4'kc.c1V[st.p#O'>Q<:mB(&O2<55:Z1Q._WNO6#td5ne$[5>)U@^'mN5u0nQ>o%*5/%o4KBS@'m\N[kh0`&.('[alGa#@0$iB`B031,>1Y/:4@7STA/j_7"rM!O</!FYHj/'uIr7!@aAWpP\Vhu_iZqI(k:HRk7MC7$%Z#<b/r(VXt*Zpr[W\r[hC[n6NIj=-d>$F;HVGht5^(rI.B`QD%3gK_(<D9*8!UB%cq1,#>PJCl%loq-PHO:k.^HhkYl-_o)qtsNl%dp5?3ES1F!;$R!"dcaV3..7AU23D\e0GfqUo]puUFdgD?NBik#lg:`RNC"KiRJtP+la;c%g!p@V6d0OQl^cs/%.Beo4f.,0O:l:V%,pN#s??pD;U+lSn;>h"5qHL_hCOQ4]UAho!Mllsn\T7`hSX'485$[JU^hj+ALI<[C49"8\JT1E<6KS4X;VHR!f71%_rXXoQ[o%YP%hl_kph8rd-NC\%dX#,G*qH8FVAs=I9OT/H@XQ_`c(=&"jrMs8lI7EIe$i$@]'g(\n8?`#Qd\FSWe%L=MMhZ?7hiX/GJ%R#rlqXSr%dZ)jZ%ll^A[J(_&f-X+n#2f50Yl%Vb?+0U#[i.Gcl9B1_Ob*@)U[VRT<N=+RRM69F69OD1DWi5NG6u([jnn(A[GLqDo0]/n8p/[c%^S*T#D>AT[NO&Ti?6G9?k:>(DnZtum>O09(KZbluVVAqr<hn[eS8Pt#@U`23X1%=3;P[-f8u(89'Ra&o?`n:j;.\1Y<3**qq>GQP%heU1a.^5RLs.>aXK)E=rDcbWus).eIhn[&YR4eQ7dcnHR.\1>P%?B%L<T*%ZVHCQ2X5m,js/HOLiXu^a.<.44NXL[ooF!g+9Xj4g%A<q)PPP@!OL6&4d,M!nmiM)diD4R@n8#T6ur`/2hZ9G>%c`.V-B*6b?Ja<56Mmr\cFkRDfnl"046EB!rV;HO$p2>0)Ei,h*Jb4i#%nQ3`._^b'I3it'8dt1DFCXh+;DO?+T3tA=Q/a?B:MSekE?Kki%=S]#kejC:f<Z77cRh&,+S4Z8`N^TShX!-863(+>cr7,VsIA&jC%5KLDI`l1n*:BFCRCY_e+LR?HlE?fCh)KK#5l);R0[4s.ILIQLG'L;b\dseK[&.QZJ'5HrX.a;kCJi)$4h["j\(!-eoWhEPaOWV^k%6Ka*?ZHfGtGaqW;re5SQ?E2S'Q.L>WhYUNC=[,W(<,$gR.j)1o=fY7eE(MoB8.YraqN]qkpDXS<mWGY\75RA-WQ%5WIVX)+[HaCp%N+Ypi4mB4$i_qnMN1YDa;!a_g8':2J'pD9f9U$Zu?VEeA+@6Buj^(CL:[9lja:0mICIBfe7_$l[GV.GG*25&pV2leMFhd5/=!XAE%a\^Jp6U@VSK0FCOiCB<WV:s@jL%E#Mh[m"uA"3bh.gN1X=DNcrFhMD)*JtE)lAk\U@&]lCC::W]Nn9b&mBsNJ3[b$+>HlctN=\07%^gdPpXp%n=?AR=c1-N;q8gJaX[-E[M<@.$&TQahN!_=<4[M*fI;*0r@+tjr;D.!AX?G^1=I;(YI#b`KkJ,fff@1_!k-q.;OYRk9c%r?gI?4"c_a]JZ5!A#P!&]9=BMgL*STQmu7=F*5"8VVb]>@5_s_JP]f(@B!@U8+`b"?iQ-&435h7KM*u2cTPURYDG1K-G_qk,(AUh%5hJ[uegqGOK,$:*R;__@(h0%NVUbL`KHfm%r$D,-r_VF[8u"lA)@H4?#j)u&h0AfYQr=:7>I,8<;?YIL2ak,jOQ/O=^G9(s#Ta&"%4?2UY"N%ep[lPAfpLZ'WD+I%R$e+LXdU$X:/TiiYA@<C"\9'O1FV)eoOCmmT_Ijeg5]<c:%keiU^bf"E-^EP=(@o7`5:]ad0$#I%%$O,C1Ze"e!5S<;=m>U+Qq[jd`J:er&3!*d$hc`AI\fkA"!7h&sZX;&Ei<"sC#"4K#o.?+l^sJ?YP>6`.>pp+=9FJU`$]8HY.W_#7%hpbtp+[]R@2?'h%H#n<*OGs49Kk#e9Bm3bLFXgRDb`#q;;du:&&VLTG@<EfeP3dddm-d4<h-P^P'^Y`o2fAsViADFCO&;-cg/XeN%UDXrKFu==%AD#NRWZ>XAl>Xgi#'LMIKBuI;ANE:?A;Annb7(bg"I904LYC&)qg5g')[?$#!V?!3X0ljDUKJJ)JGM=uYAWhaX@<UH%Y])!qV>FHbI9/aW%Y,1ZNlRb!1>k_'+uc>'Z)nR:!L!9QYAc+D\5@'b^q6WUBc[;h,8L(.lMQ^d*W])^.O!@Xi'eas)jU,9Do78:%nIVq4XYjOP1n+=Ro8Ej/O(OW#d#dqc4Z<9Wc1L+D!(A(@*k^hKqP+P,fK,Jm%0>c#]A\LT*Y?eFX`V,t`8uFVOsWIZ6i^gK+p)RN%Ecd(&MeXFP#`^QCOKjfGbcm*-.ps@u>/]-=+sZcchlRVtD`dGE7#HhNf^?D]RUO'n]s;S'+Ph"F5TX"/-bE<g'&^iQ]F"s@$iM24%U8T^6^51q:M#iGE3"iM;iXABkn*<4OT?3Y!GIt[CA*8N`q;/jc%b$aaYgrWPYo'#K_9#Vp+bh5[BJ(fbeW,csYI>IY]Gs.>)k9"]%D79#L:hYpV(PR,sI2:!m\QAq)nbcs,J)</B2:-2:CMM=GYu4fXY?<0@3_lN[5'o><du<tk<Ll94BA`3221=dlDl<Bum!e?H?#3Jt%n&jH5H`Eo#/omR?8UYMeAgP'6&PL?D2S[gUOse#8RIk,44aMD"bbY*9QS[mdgZ$G7Ei^_CNOpLl]K&n]Sf:t;H]4%:IMl@f0:Vfu%XkUDD\aSGA.kg"MFe^Her`%QtXqbE&:1nY.24ncY*,H]Xh+`67r?bH\rALfOSVQ)pnTXfs=*Z%*nYRr%Xesj15(B.RX=R_Op5X/Z%h'F)akXWo\U=]Im;7G"Wli'51V"^.UECmaX1$dQThR3(,qH?^q$S$&iPZQUb<4_CoDS)OpgmqT`*QR2<r5rQ^p9%j(XSkFLG8oc5%];"*E6g+"7iS;2q?0fU;h1*TB2Yo7[EYM/kRcTOklA)tXs$kUQQ9&;/dID/I9RSU,[FJjFBIpuhm4P8s<rs9t5F3jXG:!8YNOrDk%X=PIj2EG'Fk$j0mlQUW6f2ngHl_YNGBPoGBG+$Y]2>X'6cMbK:NM=,mc0h`N0CHSeDLDihn>DFj)a.D1oT3-]lSY]P;8eBr-$`2Q%&19\W#:Il7Ec=u6pVt3m+b^gl=p(kuZsF5Ye81Z#p3<@&P=`*GcI5,>3hXmk>HYN(dsW2&jra8h7e[J5>5*4ms1YY^/p.u4KoTN8%Sc4P981nc85Pd7;Pb$5LD\TT'O6ZZ)F_At6;<.(A.6m6+q"Ag<gg*R#AZmcc)N?&-h/rZBTWbo:`S/B+Bg>I,ZCPn1C`XL#*['os%H$RTeSiK9">4#G/gXdZckK[r:DIpr=B^YHTl^BY6HMAs_4oN'r*8QrT^ID^imd/e+fD:ptcf&KLN?0`sl@Fq4Im"V=!KGq`Q-7]]%(H2[`jrs6Qb/7YqQL=Q,HMP4](>.im_qr4i?_a:iNVe<J]m+>i&pX+`Y(-9;>.&bt]fo=uJW4"'Ap53(d9+8`YD:8C>Mfp(F=VY8%FRt[iD=hH+FkNrqUm%M*kN@6]-@ilBL@TTc/*YsTam$j<gZ&(8DkiB,bW0PTm)rdD^X#dc[m?">Q07b2FoOp,\!*B[I(/$J'X`O^%/cAho"VB>CS%1OVN_#q1g"rk_1g?OMc+O.;V?V_9FD`]+eGjte;H[;Xk]m"$Z@"Cq2YuMdHS!EnEdV?U7^^4[V*2B:9W.c-0F*T?%n4$8*Y(AXUbWO,2b,E_TmXQd7BK;m9XeeqL6f+5Yq/h`UqUf"8ON<p(9!.Jt*2$>/Ze7WEGbqQF7gjfCUZK5!d8#*?kr-,!SrnB2%GI<W:=N?Ed>?=<b\5?pnoQBT9CVJYt6)2R&JPVeig"YBZ5&+%9d*A3[C\'$@d+A5gmat&Xhd%6c*;D_d=(^$KrJ+?*i9B6u>3VX'%q)q.k:eo=^G34_Pe5+!K]f'q4H!Z3f")Kd*pXuF@bjT8PA">gOR@^<mo_3Yp>M]3oq7jVX0XH1R;`YG6g06Yo5FCd55<Vse@u6s[%b3T?qcTRn:DtXtLSfYV<X]j=,^/+-[h^Z%0>2"a@8'3q5bE]oA\V7*,I;(Lql2&hN@Jsfmo9<,=BP7-Q^/NnqG^D+B>fckin:,bS%0E9]rl:M#R-PsiJs62_6;?>*^s*X.gX;:<tqkpjm<O;XrhE@Il/h/C4>p"qe0&JJQ*dmk\kF1['T;RrYD.>J@Q%LJc]0.V;Al!4A%Dndf`T8S3mB76C!DU,<79/@r"ISW%rNT]n86Jjt6>(Yq*_<9Otros7(2`r*W6Cn&GGB`1hZ0;(ls0B5CS62D/_+t:aL7W</Qa^n!%/,\eZG&k:@ApeHsUc+dWq*.u..=3^\"ZA6Er2+)cb[P2[E(ulp(GBZ<daq9.?MRk)27%Csm)-:gR"#l`<Xtaa06I)&Ok2KM>$hQ)%bAH#UD`N/\2]'k`oX9f.4*[(`^<W1<bLSUYPK:Y2/YVE(<n<b2=`&0=CrMt3bdTtR]K)mBqEOa%PF^>$M_EKGMp30^LYtX7b>0X>%N@O%\ghB$K\N)K>C?fT\]NM5]];L`[GA#.X7X'&<GH=X^]F1E9HZ/="f70HQmP\SW5DkF=Qh)DHcaPQ\7]Qn)F1bB"b$*ijKK&3?%0Q:7N^JX%Z0"B<^nqSD\V;*Vn3s7BtAs6orn/Bei-*U89`cm]u^qO9=,d:/88$7HbS*#\Cmm?I.rdnc^eMQhSE:`jo3tNe<C*^=<%\XH%^"!D5P2eF8LFo'Ek#shc\T:*-83S<nY/p]UmPhKho:C-]iD[#Y1p+]u(AXUL*SmENX+/dqU/O]s&i:ml-.uj1T-r4I`83JT^%(L4U'(HVoMe^e>ZWVXdW2+#RVA3XkK"FSFu#*qD\/iVL:n@:3Pb<(3r!2Pf.\D#]m/1#r[U`$_Xm09j!i3S+Z$K?5q`@__Eb(5sO%i"'3"BqjQqG05,-9PqN/HNF3O]'isrTq;^#\baLZ4Y/8&89I'dGu2Z7k>p(,K@#h#CN(kq<=gjQM_4+QqSS/M5;'l7\PN76eAENG%rl#LZ&+N0O[cfZ%I/NW=lX.]M`\2c,ndEZsJB%k@Lp1/h%OY<Ln_:`nU:uRSXH:T-K:+lgLqrGK=N^O#cYZY,idA]n-?<-[XirHd%NC<Rb\n=#N:JCT9DE-H^@Dq`8T"B*nX*RAKKsoV6lb0BG@YpeRnPiCZO54)BL$haPh89EJ.J&hId_fcP'HaF2e*q?1#$hII=+V=^%TqC$KQHE`GfC\mH_kW@*-<i2klA)q/Ug>0!'SM9?X#sbZ?AUckod[M&Hf_G#n'Z(+9FU/^J;,L9'Jko,@:CYT\PbN4/BGQ:3)#gR%%mQF4/=nsF@GY(PIKs$?F2g%NJWj"UPnc(K&M!CU$;$d&KACq*>$eb?bT?^NOLoJ2_jjs\1SB9'9UF2g_]:88l-C-KqQ/RnJu9k)%."&O.&-oIgGb[$@X9S5bp9U%<nDK!\H1`Nb1[R]eq<]0sG;?k<jPtr>LI><=gAJ82SfpC<?Ze\XD,f&l$i\f3@QD4X%J(G`?EES;%>#d7LZ,DIYqdoLlpR_:o+!LYF'2C+B?Zmhic>8<=jS2,^ktl`!F$V3k]<WN$"9Vpj=33Z#(INV"B`s4%FOA.4_b?=j3I-e1Wf*-?%3*rjXeB3Nj42UKMf#2Q>5s.AX-b3;;"cCEjG!_).)Js#B\WJJ1dBoJ!]+oVN\d+s-)VmL;\DfJ4i7$F#U,`@3emFJdlijuPZ,D0F%mI)RlH"Z+M8EIm`p=S7_*+>R8<c\L9ZF?+WZuKa<UJiQ:Zk(R(odpEIZ[;Bd22i*nQd%-a$:44q@@4p/GTK8/VrWcY0J*h>&[-+5%(/9O?4[k%LOc_#VoJKK-\'N'-F)nR^a[4e2*g2ji]L[JpL:3G+^!R`(#\r^i(#IaYe45%>TP<%p+A/oW84\`>!#Ub',55`"8dYRk%Ddh/kIUN2a<mQiE8KNd\oO<mY$Ba<cOs_p&qR"<2V`Giq63;E[KH#_q$'035c,p"P/+;ci>m1.c%3NDq0<0g5:4(c!&eN6VJ66Yc%A\;jO49?"=9KhT0Qurq#/ff0?4=EN/(/$oAnpEDTJc>O3KLDG>Kg<JY8TBEFliHk<.4:/t-:(W_71F0ck4^f$#6SR`N:=j]JPtf_%h8Bp,0o;hL3p9(idD^i.l1B8aa,!?T5dK<KSi`^c5_@uQLcRil)OZcm]dZAgA60\X-7cAPIHYgMA`C`C&Y*QZ$s(^;`hXXJ`s=lF%CJr&4@>T0p6eMn5nm#uV6b%G+"aN-#g;#H<I._jk5:,W\j$og:XfI*rTgQ)(:-\@f]s/8:q[g0pZ$54?-9PBI)`2[<^+<+$)U/aH%?^CIsZDgJLV<%RoW)pHpiGo_eFYY<h,s:_o"9dU`4FJ8Q'oa-8K$(ArjG!)*Ge=b@;^U&:"g#bQq\/NM*jlQC-`lhIY=G0TNdqRG%'?Bc>/:k<s#B.gmd)i'41SW\=k5.?-aX`#h),Y*r&6n5=VKYW=A^agk_!B&_K/7]/"`OoSoEeja$Z[G/ImkWZi-rZYIe.WXd?]2;%g=>C*/LWr;A7GrbXo%3cXcDhcqc"?DkX02u`"aPr9Ujg9.\J6-jm8eKJ*!TU`fU/"d5@A"liPcp\OO3"cIseOk;dMGCg3n3Y-OFC%@Y'ZD;ea%uPe\0DZukO#UG1TR7:d'*J2`fXS%>>3I#,#ilLm8X+ru)'*Y#$>P%>7#dF9_IC_S1RANs#9hR,l2rSSFQpVe4!QC-;j%JLq,+BGtJr4^LWr,]$:aBK[#IJ\\\gH@gc"mmHCIQCL4,gikUV=#OO;0?b3/h:REt%<!T`mj0</pqaCXZ5Fb.Y_EuKVT4Eq6W@3Q%l!pA<P\(]0ZAE'D"Z/QRq8obkc0-<&?Rp:UM172/inD8+XOrN)J+$H3/2=N'8CfKM(/bT?R6B+JZ%a<(#[>0pg_RK'%.&B[CHE1$%rmoC2Ea'u1T&SKY!dt*&f2LUL<$EWSb4(2j9GWA-PS$#`Wfp:kOT[FkVi.Q1LIDqEFfe?BAg6M2&oALG,J&j_k@(Eh8/*11f)</d%d.5)`ds4g](K/,l&]Dk&Qngj;kq:=6"ic`.%F])OA<I_4F"MXNJ*5W\+%46W_M)U]41ASUF/,[<h?p3]+0TAj`atsr)lThSR>H\s%/4r#bBOsFM8`4,nqe^"X!A6hbP7?2mM`:c]W4G*RNIXu1=?&^YQpl1.5hocjS&0U-'@18n\sTs=d[u"A+Z&P"B#S)%p<0+e-)Qkn%(S3oOO>/S(%UF;`*LXT9SjO<c5o5h=3(aZdGQs_//NA1h?$HQZ/2<\8]'p+h:U]363HX3tFKrc+Ep1@rkj\##.HJj0_r9s[.HJj0%B@)K4\4L`)_DCC\Ir'?>S\-++35_ibkA?"BJIg$/gAVrrV4^BJfg9?(`pJc;V$QlpK%Ds?cJ#UY+Zi#c7sYc<c:6J[*k]L:[MZ[+%Ca;%NB%[U\1g?!-%$lb^7$6*r67PW(gct/A%aUZ'hS78gH&54:cXP1=P_(\5LP3K1:`<#qKBVNT8TW:$c!=KaCM@_5BF.W_C]tuf%+1)pHWAL0R3O3kY2jn?dY(aITCtHqYA2ec]jCj*1C0r<I(t3"Ss(*/</88e'gK7ZGA8R//'=+bk:/-L=6_Gopbs:XpLm?(dYgAn_%2^PZ[PWa).T?P?33ib#_)ns9WR.SCo1COKmZlGHD3`:j7S&Z=&KlQnC^?i=p/bii4d+Rp(@;7Ji;Vh"=+<#1;lH9Z4m.\[)_g<+"%o>'d@iU4W4H$nR@(I[+m=5=>@@4^iWi^'X'e?mKWej0:.+g/1Z"<J^$]Eb#;?)7"3k(i>T+!H]K)1L/Pg^&1Q6ZZ^gR6f!SFXt(?%:5?1Nb"$D_as`Os<b4UT4UdadN'sr/V3$g$l"[SF.4,:KXj4^OVqu%;j,]0[Jb[k:R_\-EH=5M`,[\it/V5J1$7@P!nWuj3L.HN,%CHfT\-5L0u2\=[PRHt*I&Y\UIbq;[f"f,T&c<A0>.j+!URY[q`@uepob"2#l-TK(^\Ej_R8+7.dL[>2#+e5SeN#Z8tb?jt+-g\4(%BRZcNfR;#cIcUL4XB:W?'Un>T1OY^eKImD*9%6cH9p"to3l)\2INpP45DE!,6k*?SIk6[V]qq[e)P1QM(`S'+<'#;+EF]iX)0V-E%?s%#G+A/5QA4U>P.3]FWP!5<L$d5c4(6KKC4$>o.>R3sYZTGVFK<?RGUX)$h+`k4C&Xb6DE-CeXC'P=p12MqgaL'q'@$6>)I+Nmp%\2\ccHm1=nG=V9^[*^*R51tP5caXpI`N^?&80'?JDj6&O5b&o%1Mit;`8hn+Rp746Nj_Si]0DBj^3Vt!I,B/_B=WFMNL[qh.lD^p%5a7*0M8C9.-`D[0k-oD4[`D=oco.&^Dj'_EQhFj`XU@MFa#mQBK!GQ8jjf@!QdL#4l=&3@HJs-lgr>%[$4l#:Js5MP&#g1%3SILs%eFMChBA5Hs>708M71<I<kkUh!aG2#;@>9HS-dIJdkPVU4oATUk5u0QaDPA/OOn7Odlqj6N4ri.q'2.8fHoU!s5m-idNggRBh$lf>%s/)7rkB$&><&Wic\-Su89HbKQ(`.0bhj!`kI-+l=b;p2+)0^YWP:orHB;!=m,!AF)#Q'fap-]DWOr.!gY9m&K#:1((-fiX#_KH,R%?K$Ta4Hnr*Y[RMJY%Q0&HW&&F]\.cFr,@X='cIYTmWWhc5?&&>QLZ/P/NaV8&jgd=O+4%Y<&11CHa1[5H<T!EYiGrNYs:#p4ku$Z%:?qAh&\Y(bL3N$aS-Fr<#nt3iZWCDX"C`e1JqS*[ZYi;s_<^@bVeH<PZ\HW`,A)\$L*fqYE*=LY0]e."6.o(93c%,7A>J'U,9um?%B8RS+W3YZ!Ud"]M+X:!X25cS!>+%NKLY!.j,8J`bOkpfC`?Lj&1)(\bl-lRKWR6cX(8o+MqtdOIKH-FAl6[`8;.k##4WoK[91&n-%>$T6FKaZC?;b_rJIr+>/*k@JEUr!:pbB-\A-Al"s:5'X(?9)mQSEC<TkKZ;T$Ki@.R!L5e:jahRr!_9).&t((IWA!=PIs1jZkME3%rn-&V%TJ(61E&Fe5C5(N!#[8M%jIX]LO&:0LCB6P\0,FZ(GaZ79/n)!(Egn>+@[`e&g=g=K2P*t&>Gp`k/!#WSWd:<I+aq!Ie\Lg%li$h=.fM&-?Z'M'4%H-me&M"!YMtle9,)QT#<0W4g;.??.s:Z'U\0emTl7PU#]d1H^3qD2[DgDD,4PtZ\6"J6?i)+\SSX.n=HKb>%<t]5QgYDJXR2EZ$;SY1l$hnj2a_nS==_D\0T,Nl$LTf5<BJ_XQQYJ_h-+aW.Y\WR@NP`*WJW7OCg)iVk=@kNjcBIU<AnjZ-EXEYt%C77$F9m2-s1)iLsG"+54_eunfaTON%PRlBl!ZHdip_(S<nKfU:m5Z`ND*AckkjJ9%Dr0]nI=-n#qJdg[d>JS,SfD&A2N%-/WH;.+%7s1CC=?sX3\(UG@2mSS(oRc(R,P'iJ<*kklo+>_2XgWO%DE:XemgQBEb%F;(4pJD+[c`,'Q<UNtMo]W[jY`cAKFL](;L:;aVeSnG%ku[XWiWFP1JrqMkfhWO#c\'JKVfn8oh`Z"oB<"XIPMCsk\:I#n`m0<T`=g=TF2[0gIA*"K%GB>lV+]kNq\O5?>K"4d6W"bJf0El@%8(^E_SY\7DrGg6HV)@VPI)#'Od4V(2(?li&Rr7"@b\5[OIe*O\Kpu+$SR4"?s7n@4ACL@n"F]?B_JD9J>e14s+%KGQ%btb_FuGnH%/Df1I.:q!(<AjE%OHHm6r$M*a/Fk4BFFNO4JutP@2P"2-SS)ME$JBNME>J@T\7oL&q8M(`lucLbF<TgP9ei-_0:,Gj4$&@;3^9C!%7t7PlFFGW`:H"e,S'GsM@Yp6&dg4WKIcKV')eu*`]"tD$hC1QV2I3P*3R)BOOXN,22Vhb@E0f4bZg#K+fP&r[IP\(Xe?eE;._rUF%;pD32Wus=nCc]>]P(>dc'5,eijjJEeYENVJq5'.o.jNNaVXr!-o@fPQZg%CD+l/GAQ#+#;R9W\3VXr!-$b;=:nd47*;R(j%J=cYW%5)-Qa&JN)p4EU>.Rj2+r;e0`2]SgL]=6G?:W-9uII<D7?75R%7^"HFq;FVsNT(ma;a!)E0'RMr.+Y`68+/qPj,,p/b\''cL:OX^S%h&ZA)o')pta_rCmR"bp@;_>$A8srrTN6#Z!q>3E8#sR+F6R$T''aqb>DM4N;s(h&`F0;7JjJ-('(T_$T,-2;F^#gpmP:Kf\?)09m%_tPOj(Yqg<Tn>P'fVHV@&[&[&&lCb.rOSW:LgnFoG>WCG$=VQAdG23.p&PCfL%MLJe=9m<7loh5I5nVsMlkP$8BJ'Q[j[rQXY*><%bL8Y6Zkii7-eg`JT1Cp%\q8o=H0F\ZT0aaXd(R3!8/[/uRlI-SV#b"F;qXQ^(`<,@EcRB`[]kc3bU5IK%Q&;,B0uj)pHZ;nArI*4%]XsjiVmdW1EgjV6/gKe=)R?XDloV6:%EWuk::q9mCC**54I-hdT(,LG1eY^Y9IbV'(6@knaqPo2ZO9hm4L$g*#'Ooo/N]\/OIYUQ%7_"_DIOZI><p5P(i<B,V:mi)5B=M?]!_N3c[d5/KK_o(CS-\W8P275/W6BT[du]uBi#_0aO^.XBS+<G"K-AmiWF]mP[fR3\7ZmZ;%=/:b/L1`]Q/PkY,'F%>^*c&/%f/$SoB>?Z2"%O&dgFM_UM'H?Fit7CB7"u:TGes,X*_9gDr#(rk&lB&b]&A\4=8Lfo2jP9jgi,4O%^"&n5E#7Mnj#c\+Oni*Q:$JOf+lX12VS&nh,mE+E2fc*LO7jX998[c;jN':8%Ctpb4W)'TI`#I@;pAa7b#B"ch!H#rZe+Dt[?]G.%+h=h^k_Z^4fiR'm6%hh.Pkd:m`7ftg^[1Ykcab7mN#Kt34!OgW1PNbNW.f,2$D34cY:'*M3,r_nE$f+')Ulr%q<^?Yh3M,2?]lp'%@X'tS>YDU$/bi]kaUO&f`:VjTbdCt32DgD-+<rGkZs=N8^kqsU`1+"7WP"3)VN-hXo\Au\h8c-h6DA,B,UR]4n=\c-'YOuWbTf-&%,U5/[22s&J@p$gRGT9(aV2uR(9-QEOGCbbthKL\hNpG!XBAc>j^1Z#\'A<OE_M1aBU9<,[ML"Z(*&E*R<VZhHa73RBp2:@F>R8#I%E:W<9?b=tO7ETotY0lZ(:RL]`4br./Ep6T0jl[Anp1TmtXjH<KW<n`^pM7s`M^=7qbBL^Y^It-br*JgC6")/4<[d<F%q-F?AXaU0%6pjGiN@oME@Cp85meu_8@L5S#]+;I9mX4\$A0iZH0"(Cr)O,nfIP*#!B3M$)Q4p]YF8rhXj_?]X;5O2+kM38g=G#>G->&*[)gr%)%k&/-M)O7YI3o/=c=,:.,0=irW5EF@sErTa<!`RQ/r>4!C#nKlA'6nrm>I\b"PD882>u0nQI9>Xh[jK(%]t&Wp?bZX]>r\j4<eD<m%q)(e5IBu_pDZ^<IPYUXj!ueTAUrs.ZNLo0""cGKu7FO[*Irgf-<sM4P+)WYAcJ<81gO;,><25R<,B0fR4NdIZSQ'ROrPlY/:SDdf%D*MeP[V[cg:7(S-@^aX@\pl9T2W#>4FTj?`KHrN'kpIrQ,Qf4nWKFX+"=5sW*h1U/Wr$8``[WtQ)^1Ad[clP!(1HG)DJ$F4Njc>F%,QZ,9o&TRKBu>+-]),k[nPdWKSE'&).?:]FEu7M)C\l+FA>2TOV1msO@B"dnET.Sl-"NY!2Sj$FDlg%C19H,HlasNC?`&<"=#>'m%</S87)%qS@kJg6Xe@6-Mrfj^NSk;p`j[!1!QomS+<1:\7NG-Q7QE3S=f6YZ^Z?PbNBc;cR64RDQI'KBO(8rd/QWB@GQtOmhX4HiR%buSG;_YY<Q_n9a_C!DbbKS(KRK?Jgmk/_:(Pj@W\@N>[qG3'OG_\<Kj<X,0)+`/@S*Id:*f,k<hM-"mgN8nT.A9MndSLK[7ae$0.%*:V>r3QGm%o-Qn9.8#6g08gdW^iKu0GiKu?"8e<08-P7N]l,BukFAU2<5=@1:Wg"Ggpg[Y)DbW24Ec4Kb-DWKP-\pk.N<^0mjJkh%HG<8J:287RQp+6%)1e%^U^I]ZLKn0*aT@Ei"6eRg4[t$*KW-=^<?nH"TkVQ0EWBP?a3OhZNaGTmTWge+N%Dd6*0,SmYq`Qb4ff8U%_]7G:)`0mFgo*^k2Js;'1aF5)J-.f4J`N3Z7Qk1?4@U)o0M6Ae`3WcAn/:GTa*Sa#;SJ92A/kDD55DXgJ*Koq^So$A0BF.%,MP%-%jWej-`Tb_un5;H_OuV/)G[k"$k8/iArhY"9pENK$;SK+(=&*]`T+k9*UlLCh!2NAn,,GJKh!-hXZ_?;`^Staa:$lbqamShc]B2h(%)Ip7Yn%F2/;'DPOX0M*co5LPh<kiY#L@X3e(EO:uS;E;OY@#'N\[VD=SIIIA]mc)'H/a2L_KU_?OfO?,oo"pR22-DU81%D731&<b%$1INpn(Q^uQ/g]d(OiFB=>td*h!5d5+o`R_UYkD#4&"V2RZDHl?hfYfJ?tn[l9n?2$;<Vr]Y96joa<^#Ga2nKp\KU$l8R]/<.Xf?%KhlgnG!V1:YFj^T.=S>T`:rdr+m2#b]meqJi6e16]meoJ.`.56M=1$E:Rq+"80.#&5Q:m%HE3\$G)!9joc)Zj-f4,YpF2)mT&SVm%(Tttk*nrR?]md]]1sCXrZ_Y_3oaBYr/SCl>J$5K/^GTu2hnV6RA)?Mf:-a+MgSFT?L!&*aE:PjRoa>+I*oT;s#u:#Pn)Km"n%o$)%^X9AJr9s:d?Qp!:D*-IbIc6k\aa'NV?GGu6rMGdD2Jdk4/2<]BrPI0U]t4Qi^"4q8<ket/iu;Ej7bE-:'-F*hDY9LAI=+EFdLf5m%(qeI=PcORA)J6:%r<AE:Ug*e"`mBD5qD%^7^"%%kXL-C2S3S,7nQrsa2s9-)c1e,VYMV2-?AIG((G5)udX1pp/J7G@+7EONdIpi@%h!6nJ1-E2!:V%WN>ZD\&k:,au^Q;C>7_72)5``Hn^jm.=o3T3$ND9R1V(qH3$VHI9L/BLJcI;&V1o[#??GFnMQ/g`e-Rl3L>Q#o%%4Xf1Q(X<VtLdBm+p\KS*L28/U_L)6u'4SL@T'Tdun6>j=r3<Npoa>hmL^u;$Hi9]80U(>Y-]b(t<km#Jg(EcG$TAP_Z8a)dlPFFY%>YbZl.Ph1hiQ)9jRFm50*?UkoV=]&r.nf6C&DG+(R"=6:^@>N)>P.,6,CL`=hCM3,^[s+4]WbjW(P:R%!La($Mns<"%O/t"Rp!<u%p1IF3MoQ_6aI/qk8)6p1lfMiG5<@u\Q,Ms>IWK>fc!7:G\Y!a3.uSa3gKECETDq&9ZenF$jNA@mft40;lMTbg>VYd!]KBB!IC<3d%M;74?ca3:E4o3h1H9(d`XBdm4ahuu]oqgA+I)#SAY;`V-ZcE%1kM>4Io5c(?r,ZNM3W2-7XhD2B^UJQ\`9#EVVk_SabdM8gCdOQi%>YG&[HFlp4WT0i"TD@q#OSqSRf]d4ST$8fNmN0\f4/\(fg7,@LPa/@FV>TYVXR+6?:6aS`PL!"%^9uDRIr6l^(Xjb8d.%u4drP&X%PhN?;mU8XuE8$dZ]!e1lh2d1KONQ%@Y<m9M"m;4iG'h3cjnqu$,JWcgYCInm#VPQC>keu5Tc08i=7aL/mVFh'-Sm\/LFL!PP+MAS%1@rZsM;,@^H`aQ:34ms/=F@[7h_:RSj'7HfLSA4'.'6TA$\&^lUrqNHo)?d*VuDK3)%nn^OD-`BaRW:A`TJPpOCG9K::TiF*SrYk%I7-,4=c5#Q3%`B'h<b&EDeFF?`KXlFAp6l$hDQiF51k>!qK7tYbIsFA*-5Vjm*&g9$]bO6Hap!-c<[G<`#>hZD!p.2_7-7?0qINp%QhL.Ie^Dq3H7Vpl=0a:a::'Tdp#@IRgTM@ZH*<Z;ZB_$sYjq=h,@Ui57L!q/oqcS4c":q&<4C1*ilR:F22rm\M(#gg69eOMpa885%l/Dp_Cu]gW;2qt?rhe#FYJ6<oPP9jTqpY8Zp=dnf#N:(Z,+;Q$0C6N\pn3^nAIi23YjgjKXg1G7n\N8c4+!V+%p%ie5O!fa,jqYC%HSer8ALS$-9+^UKVp$*,Zm+#+gKmmQ/F/`-o0e._V/LK0GGN&NNR[q'P[JX+V[1@Z>D6!:c;t/G167f6$1<R/cOcbY>QO+M=7EKb%lJ(/EromJ\pA818dhF*T=&*=f0>DW$oN)qqeWRIC7[@C!g5;&`[hZ#bR4+o&jO<gkE]l(],Yc<)1JH-]eMHMZeRgt0`hl\:,#kUT%kITuYX0k]?o?'&7>E@;\1)J]mP.rY_>Y`#FfCIh$UMg)#k2q@RR[3;A^F0\3dX:8cinan7KK"S1[GpY'PmBYFmF9)3&1885=.3@I%^OO+0YEb99BD7nh@6t\UWT*aJ2UqL`K<nRbk6@Bnj*.-m(N/%^a]lc/^GV.o[$S2c+83cHQ*,'"TJ*LM0>BrF$^Oc5dbSRa"GObc%!EV6s21_ct!JP#%lfd+"_039AhSNHofWUg9qC3K2ID%9%6d@c]$mDC-`#V<no)NQ_'Eu)I60]\cJMCLu59IK+1s<K-i9m6reKoUF%-bb-FrNqlIY,TWO)J&MX*p-BcmcYm$K9Np`L\ZolM<bW`MqXT,:6bGKe`shd0Eu6c#F?so#FY+]l,Ct"BTAme;OefHQk*+(j[Y!R%5/M<GJG%_2D!h/SC!8KYCAQ&P$2S;`]&"sMI-%EM=)ID6AIQ"fG;T\ZF,VbV7b"[LZ`(K;9/[^GO&Jk#BidlS(r0W/)0a<"E<O4E%<]>4#N=bG[=BNk6ZM!&N4lpW3@3UD/h9_=Aq'.i$j^.Fk?scY=.cXq+XI`dj5oN3g]R@!YqS[u0V552Ll/Q5U?dP&Y)OEY_G"LW^%IYC&JpV":;b2kpMBaZhgE*qS8I:f='+lNEDkQ<<h<0`*l'UaV!c?dRlQ=2Cd0(++48M8rW[[e-#SGIQ=T,cRcUkr4aO`G)1ma\2G%]MgBpL6SH+Lm(Um[o\]l-RWsG7e=Rt5NiLJP7f^K@s[b'_['NXW)ih;DF[kF*Ccs%.]--FhcVol7A(;j.623m?Xu!Ar<2%Zd$t</%_@s&Fm"Iq0S%#''=,B[UnlmcIDqjjg5V*XigIGCRGc>UMUY&/$N.17WLEnn*+mtG\rmZ.eG"AUG)EE2?o_MgGEC&OE<AgoHitLEG%jA)5JkmJkP-6AG9BsU*V;%G#VLSD'%9-\NKfA!V2";/u;#""es-fLF!d@\EZC*WT\:I=R\o1ElNb_hN5>RD9sT=]05ND<+,#[G@F%etl3^r^/^k=7EbGot1^T()K-$a'Eu9mNAjJ3E0bfaXhDi[rrmUNLU`hI`e]NQ]C">(%e=0p(mAkgt%Hh!_pb`,%*Np/"/ZLO@R!@%>f62?$GL(R=dG<r>EZ]g5'CkD6S+n9PkcoTJSC`@@gP-hk(OlFZ2rhBE>(Q?HC_fq5l>0ZHI%"jH*c6KEb@J)p;-PXFN0Z[K*QJc%XlZOi`moo&f3\5qa(6WDa<k);O."Zc=*T`/;`!omcWYr[a5bkKjt`WtDOl6]dt+m?$I-le"+O]>1J@6M%R4+Y6s.1lkc^3RX"#J_%ZLGL&6qNJCnRQYX5E#kD+q_2CF%1i?S-T5;&+qi1!_EB[>aPe^ob1('rP"uZhBW],;>9jOa+u"^\EfEig"Voq[R>quft"_U`Wpa,%/8"8J$n&lMdCimp,e/g[6m?mNJ/n8YW;$qB9"/4Di-e364W+-;X13%9`IXV&1f2.sHR+FbXPeYNdfZ;raPD+/N'p8[WJ%%g-L4.'%kJ9GH)_,#M5,0fsVZLT*D0*0@1O9e!G.MSfaYrEWAEc:iCQ5;7kanj"Z\S6b)WpBH5XhBOLaAcmijBG%Kg-&F"e];LC>GSYYrj[=%YuUR58N;*DREC-aOo<XEI.\jc1M<g-]_4C>&n/(cesW?LgjSc$PeH+h2jn-!%ub`#"Dj@oj.:Wur,VuFna.(OZ+JV[aTurh$XaO!%K>:u*CjPh9S3]J\^_HYa_BM@ZdHlXPP42Re2`_UeS\+l;&<B8Fptp.6_f3u6&#)La=hOaH'WZJ,SP\Xbep`uT%`9J!LX0A*o&.;7%Z58G&mUR=-g?`fWMAA4`id1P@:$W'#\W%T5]d64#:I3dV'Oj#LjPt&'dBp28Z\A<.K^13J.?oD>FY@aL-(/tN<Yd!Rpu&bhdZ/0&%!Se9R?"mu./WLS8N"<OQqMq]4X4?*3G<!AKS6Ym#&HfH<MefP20/Y`RhqE/7a@c\pc$/-rL"ic>(@@s+X6oi9pY=;6h!Eb?`UtsW%<:EEQJ[9RPLIlJL$$/rKc&D[99%McgX1RZjOrJG]F8NLj2#i##D((0S.Ke<SdCJZ;%qIneY.rVgc.nkBX.W4lg4gJ.6n9qFDN+Bl%RDU[MYF-n,m:Fi"UF3Rb1qB6b0P1lQ\0WZEO53Tap];`2^UJ:i6*d#LqQ^k[S91@)^K1)oK5T"3e'IUhmH*Kl$:%QkeH6>'iFpQ7%U+^V;SSH:DQ!JpId3O-e?!f!\f$G6RXh&KZ;dCTkJ@HjRUV)2f]95EiHLWd?YS>?2EheP0cQi-+@,5b]ocj9VJ$FsqmNIKu08YE&%k@^jK1lPgS(?NAHi)qaN'M6d3C2SpJ8["NVXMOjbaB%HKC\+#@LbH*$F]-oHE2S;Z8D-dV(DC!.gKr+1F_&OR8V)4aKJdc)loF2U%#]aS=#;B059+?j"l4R5o^gRk]:$DBC7op27Y.!O,>BYkj]C6)+]tXeP3)jm3/_%)V"I7t!9G,En,l1t]h6/uOrMTOlBBs3\"'CaB%W@2&\+Tup`jsk13JNghL3^?kVn!o(1C;$N^4^W\$6jhkq;@`,r:%\%*'>i+->1I[)k9LC3:JFVaog>jk4eq6Llact1ICF_/@YXa5%^0`,Dr7[ds2dI+OOqNUX1J"Vgi)RoG[Ue-Y[&(^UK8f12Sg-NA@m;iWE;T2Qm0sW9&hneDa5qk>a^u&%Ta/8FLkAX9s",euaEoWi%mopfI8KdY\`!=W_YqA)L_kR6\:!;m'+sm=\-fhM2qDM\`a2)o2-;<gI!0]`=.cF`q!kbu3MXo\XU5%9T4emQts'^U-!q,QnW;<sn%?"U"*gte'm=hR/pq#,TUeHb)d?$G+GEU.9O0<Vgc@Br<$=kqcmmD8&?Zphp@O3=2$cenp8\dR`ql^H%#On`H!-!'PZSU5:fI,S]#%LoK.!p:NV>"Da&;W;>$aPtD[ce']RDh"nn3qQ[!RT>%cGG;&CeZR^DnTi,1-\0K2Z[I2Y@Lp4G!9F(d%kWgkBfdBTNHhZ'8@d#dV%Ub6cCBr/1[VPSt;]lE20#98.R/#;qE4K8`_%RLAT/=;"QoE9dMDe>u5`b9sJ!>0WDKq6KF_.]VKfh4tJP5n:a,-NhkGbG9)Q1[9]%bi_[bZ2;>O50etfQa2"+LL%M`Gr3rk1gm@-fj!'JGBLL2$&g>igNTr:?B?XIDiLiidKR]rT^8]V=uf#H4Q%dumCfPjH)+\`c3-F:%gfiQgF\du:Hf]-sI-A.Fi*P*1lWO*R=5E.'#?]a@D"L^t.t0-i'A^BFI<$_gl`AsH1YnYO9)ACuEk(tJ_\a@kh2WI^[c!'3._@)h%Dq8q[iOWrs`Y)^`+c9EK0Y"2M>j2WW.kThr"Zt0H]@(rk[;ZuN9F&,VMN999P-*&5H0)8<+g:>"FBs7@cS&[2Y(%H^FfWQ)WnFmM%F0!?'W]a6?bcUS[WlaA35#/MWGXF*-EI.lRAAjYS-,e>)5_rqJ3Kltal)98<>^=)aQF,`IaY/LsAb*V(YA)>5Ps`28VnJ>'%M:TL%a*?8LGq1EBd#,I)(g2o\Y/NQ5s+kt`]=5JG7/h?U)o:F/9YAdCo="25,-nts*9_<rHeYV:Gm+oS$CTNlqV@,:rcYf\9k8`oIllH?%AmXA]h4DRB#&i8=f$0t<F`4*maPQWMH`jcKK>Pa-Q.C/>WIpAX+hP7iYNK8!2IM8baIR4]d6^L/4KVJjocn8TYe4cm,47,I6+<?)%#?S@SFLhR"g;b-CEk2oAFW!%4ngM>:[(F=:M+.`hS9).\L\W>>4m%&>nFiSh@gaJ]!U9L5WtKSZd-(T%1Ga?M&'d=W+!5*04ui;P%h7V?Y+.V,Y0sV<Bqu")!N;Bti3Z7S+iQej3<Ro-(nIX%I!hu=#r=n6oV2-IU:IR+PZ#\K*LRh^8/%ak)'A"O+.`dpGXs:@223=,J%MP0(_@5k3@lFBCbo@4keq#\g(2YlKn5i0P&j:SqPADYYP&u0OJke,5eX9^n>O,h6OB%6=p1U4khTu$cA%g,\&M1$6%-HtrCq3t`l%*ZkUW$Oq,@?J=Y?`CL=^)fYB>Ef'VHa9>^Q.AA9Xj"J'k%YkU@Hk9G55C'mN%fC?*>tnKnb:hj2oh6VKo6F,R&4[I)N":pi*Q7i>%E.%0O,]N;l3;"QoVM@r1Kj?WiQW3?Y2E_)+ki!5g9gLsc(?g1Y7^a>O09r)bSJI:0&ki-I:5d/(JXQ9ti3\S7I)niIE$%6+@<_/d%gVKGg/N>=M<3XiGl[&_/bP^`W$&b^q/kYQMFa<;'\L]agLY_@o[%.u)fQ`53:5uo\j/]U[mTXe2KheC5;qhj*X#r$E.diDs_P8W#%]Sk\i>2/"V%'>J]_T,X6KTiqR2Zm$h9YdF$FnKTU5Co#;1p+8f=kAO2kE%4t]cPuRMC^SB\LIhZ<j1)9*^;l>_lkZbp#Bdc.t6q-%@8T>Z<;4d96q9(H73\tH;:&X,IpO?f?[1o@cc)aqIH^uW]TE01Gs3\Ir:NjY%H'lPh3l=&,3*4'Ue*mH(O&2*Kk?+2^bEl^d\>V%%Qc-n!9QAktQJMeAQ(k>OcI?+/Xb\8m[hcce$P;\R6!?U0fF"-)+mSKeTflJJ?%(RDY2I^Rd_c(%XTdc8NAJE<)9>T#/Zp!Pje,[<%`2_F+'Kc;$]tPK*U%ne8BlpM^%;@]#l:OAl63[6/6_MR0Rlk]nZWDR9`[J$U>t".LII,<*MEW(schBF-1(m29T6sI-C1i5pLtQ!3%8krGM&]uN&U7kK5Ru(Mh"<V7@;SluJkD;te,tm3*+M;:u-mbkT5T&^2AqqqIjOY2,UO#m+ZtJZ%_I[7s8&Y%qKZZj*^i>a,"8%"B%&Z)9X2^:mcd`,E'Lgchf/g\[;;g02*?;HYgR"8o\@<U7V_?i-)!gpm94Pa<)rMU1!qpH@&j>KgLa6cSX7rIMGQ3T;Z&DARgX(mA_%&F_iT5naCk,X)/VJfA6o9;@;C&6ETq1@IKBbaP$L>(1ptM,n7@M@pijoZ%4!0uuF$M3;5PACc>:n%/hRs"*]-_9Hu7rM_B\*J3u]%2c;8Hi1I&C&7*snEIT#I=Z9OrU(]]T;=5qc*Us^JAC#6-h6`@CJ_5V"NKiq*11/\,%gjib!Rd8q^TY*0U\u`nKH,o24FM1KZ3O/4%\X%G`A!r[?/ajJ'_?4J>AI@noB-:Ju)7^RpfH!^2n+][#4h+>Y:OVPD#5p[=k&imu]n+>K39tc+l1<U=<^OS12U8bOq:$N?B;Z<H%1t/CST6^)#$<Oi5"t+b@YHt%UPaa5q17(<:A<?c&45tp=Trh^@mIs4->?P<8rFdfi`=h;*P4?SV*'lAljAVe7,!hSR$\%c%f+L`$%lCh'0>Yjq+5'QALo(HP[=)l!d1#n/ih5s:pop7#dVC!8.F#:).@^&U.E%?m4?;GS%0(#['f;l!riiffuQ@8Dm??J%Z?_=]"B4"$d%nljH*\#P!0E!Pq!!nXp@hY`'7DR8cc?hXp+p;AuWQ&#1^K;pOdGad$P8HS>'nP=b)M&jkMZ%OKMoH-XF"Wikj8,n_$d2:+KUWK;2%8EqUd8i_0=imcBUZPg)c8'fhbj2C>TWauUVeDo5?I\YISmF4Acc$2:X(<bk7<V<@pD3[2jg995FHc=Q?s1?kK`E2*Qr+0;dh_pD#%[oTmP:QmpiQ=o(iZfAWXO.\3P]Mj3%G/*b5/iG2uGNE_k4+0lhHQ-o0#I5=*a>$ql8Y5j'B%!;oo]YC"1R%+-?I#@-Di6D%b-=F5%G!YqNfLO$]c@,_!?[4*0X;bHEH@.$kiOZSiRSUCg%^ln=m\[\,IZl4iIN-n8cGOQ(hhdB>YJ;nQGi/pL9S1P)+WXa8/GE"Kd[u#,%B@>C--%u3@mEF!NAJY,d!$>u4.s_(%om5S2-<Y8'cE&kK+(eDh)$b=(,s3YKWV*]:/5KNK94o,Ak.`!oA1hcTO[OCQX9S"U'pjoJ%Cq5_<a2A\#X?s'rXo#Nm/mDd8W6V:1josA/K+i$Ng%I2f76sa=%S$H(?mr'K9<7^$lEXe.iVX&Z?lQMj+,N$lZ^_UK4SGDUl%:4s%*.%eogG,tph/-VX;(L9C$>o6t\]K+`"M@(tB(q*rak]l!1f)9%?Fs8W2J/]/7NOIrGHT4TgL&p-q>Fl+<6gLZ`$gccb1VIMMEsZQ%<VUi4W^ZL,,d*)lSBiJF3=u(4,ZCFg^H9]MXUr7Wp69qXI-/SL3t6P^p.N<qVKe9;83Dt)mNUsu?S!p\NE:u[Puep*L&BK<g.UDR%3c*u/jdS3IWp\Xq59WcK7m"B>f%Kj73b,?0EI;,S\8P;crJ&p^%'c:uLLQEoX3=l`>Dbt#M602bHWp7ehPPp-Bmh(QF,0J^_o2-*%\lN0>)2L)LB[gjG[/C?34241t$*N&b72'J_3-*6lqYDnE/+D<cCmC_\C%;*V0e`\kJjRurdP.>-]P7X"cR$r8#G=$%5hGAIUm##t%I+6BQ=3V;:8,AJf*9]#[kfZrb0AA*UjTcdf40Yc!ZAbY.)*Hqe'*i_;,'(:oY1jE-UOq6Kf-3`3BT(V$O7)4aL.UDe8FbVKlaOP9%afhkF=&X@Y"cftc*RTWe!n>B)+*`P*H4\.f(H%.%X2mT)-m-#I21;;f?OjF?BEuXB5>i3eoak`nLT5T6bg&uo>A%b&:R5,oP9cE_%8-EtV8K%%1^_N2Jk[>GSm2<n',0'^TJhK>HMhL<&`B7_<<V@\!]:fNidJ;L[k_ui6\k0/aFM6b7,#t#f+p[PpbphA0F/O@_\n>Y7%[ruIXGAGlqdN(u&B?Oj0XVL#QH`FTh4j1/]l:Y$6"L0RC)@;I3l!\Et?WapA&WM]_39H!dTa#RS</U&%FbZ,EG+Wnn(F]a-N*2f9%Eb%\cdhV>h8F^6Pm@33p?bSF/83[=>l)'o#=[<Yk!:S@\8b0:Zc,[FFQO(Ru,pU9Z8;.!@.3l^3S?/5Q%F<Xd-2]O,q0(tYdLbAf%,tnBYa_nHQl!S$mL(aT[IHO1*%np+Rq.?4Wm;-OCI-p!X5Xe6A8)l@6l@1SRW?OY4T)E<DjjC,j.nKKX"!3f-&s5kKM$)YmS6VJh%)jrsr`gT+a2mSY*5Y_qn-=nYa]Rj6pBGKcB"R-D[mI[]'QGJqg9WhgPl$t7XE^ZA#PY89s.O6"H<Fd9^VnRSn["NQW<)M=0Q)g:.%WLs=<;WF?&P#`fhP"Q"FI;]i=XWf^E`N))4HWZBfZHF5*^8\<,\T$YK9nl;0ij#^oAYWq0=<b,0PmR7KRh9m]4GhBRAe;sl"'$b5%G!jV;Z,CnCcpkkQo9^=%ICQZO)&pV0>*![eCmqq7J`bKDg`f7bKU*Z"#EM=)-=nYYj2V`6(--1fZma3/<a6]R`@\Bm7-.&P%ds>n%L$^LL6G"UWM'o0`frOkke7kPBl:/HMB;SH$`)IZ@PKupnp5,cQPB-0:e7kPBMKSL*RAnY!0pSn/b@d\A4#*#GV>ZE4Pn-NIH3S0G%)L]q'N@"?kWW1a6WGjmJ4Xp&r4!tc(rbldn/BTuPg6!*n?H&[>Z%"H6`M6H.AE84g?6u`cs)[_1'T6!(4VfbYebq_%Z*d[8(6P1]%c)S:('MB]Ja^qU+DZbOc]Mn^+2ifG<f/bWD:B"2=J+./4EE0@*RVAK<-BoRb`g/;p>YW5!cpZqTS+$!,os\8@eZ<llNitdsmIATS%IPJPT-a:o&FtLF]YYgu(1jYC><NBbciH%\LkL'==s,-JZbC0$M!r]kQ;d:m#PJ>M+"8([c.f*4ObF%h[q#-s#YJP&k0hoc$F=jE0%FZ#N5EiKlSNZ!_>EGWnYAW>?=0-i4"P`00%)MV33,@fu,&_@aBUKNJ2+dGaH2H='Ql818RU7/#;QZ7,25T0o+c(QmCUD]AT+>q-^%j=K+VATgPl*F19r1Rb(#V!WC]VPsnP0F[lt0lf=XeU]oHZCGgb:kK&:ec9:VE=a+m&*'f2k_F%pS5:`9SoIG(_mhdsA`:+@e7"Vd%&W/CJL?OQ,J>d*P7>sA,74glX=S2`9$k8mDB#\pd9eOV#9\]+L!)Y^gjeO6)N+k:4)%fmri6,FA]#C*LHI#FH,<%kJTVhi9BBCt8%$'Z3MN0T5^VAWu8bpbZ0a%S@cWk'hS)!2+QbSZf687Q3L)$>"d_Ud46'94O7$C)Krc$8DS&Z64jPED"e^a[P@i?Nt9W*"d:>,IQ^%Ei((rCS<(qdV,%l7PSa[`e9T`#d[TdI^(5Qr\IOKBFW;udm&Tl6do%,`_`(@CU3;_E3s[H25BAi'aVij%.cm4695<l)BZR2dMoc]%POQf\R@N;N;SP43;AP.EqjfN?R;1\9b_ArKqMjd&b7K)$e+9`-alUUZ@mPbl6uKtq1*'#lVb".1?$]GmBQd.9)\C*+&/!"&&/NDj%a+SXS!>l-:9K-fYi0hb*%(L&(NoO$Wb9TfBkRY(hWih3Nf9%sM2-"*+a2uso7qOJTAnnb*41pNY/:X!qa]i0O'+eSoJ/;0T2?H-d%e]u:?l5<g8%B0@QUKY)QiZXO@I"bX)^N^-fqZ7t#,6oYfW1V8cWaqWmaAc^1,_E:]d4t1s@q)46C'K*Q9TtKq(c%tWN&79@MT8'I%RtKW=R09lfTG2a:&X55iZ/^Z0?6Dn=WeMgd+bD1(7t)7g<*M+Q3\h\4j%/H1.,tU)=*_Q*'>4>b'g?:5[%iLL7gd_POWG(QL6W4(%N<o\2RiL6`:mkfb31r#9UW$(fOKW+sVUQnu`k0N&AH_!%E&r#-35&&I#Wf95d?+Sgm@;CRaFk_%Ue4>ua;M4'1*WfY,KsNV*TKj"%rF`(u0c6Q(k%YS-6-YQ<#8o'_O\Li=a#Z`2.0**u3BGTW[UkoUfHC?.R[DD\Su<'#7Tj);3+b'jAFN9g#t4BZk>8o&h3?(oI<=0'%kXa1'[UaEOaODK!,8Ia9LVLr)NmIbR"%S$.M^'d;Z&T.Z1'0-Bl6]C<Q6Y\K9:mYe36`"Ga$;L*2AZ&l+>m[E*BPlI#n5<\7?cAY%(O7>1cr//NSJ<R%F[[L."R"@OYmc.mS7<[YU,f6l222GQ3P*<%##$b-5%TlXAI(]P@R:rr1uV_4>bMIa+@h-0"D/L*Caom];!9YD%O?UpgVBrX#=AP,TV,/K]b[)#F7U$H#cOf&&2aBIerZR"N<(kZN6CFAF?GR\^L'hcd#39=sTT6+UV+U0::aQ/\3TRN_0FNED9E<:f%&[pb7$SN.n/PoNW,m!Ql!RO<MU#P;F0,"=+nD\QsNYQOf*N!TV#ej]YGaSQ1+gFi`WR!o!!2uYZa,qWN-kcRi.q:Q=e7YIK!!F+k%OATOW!gn](13u^h??qq=M!0P),BALN9E7H`ZQ3'61G9Dt9uA!KNc^eJS3fN"Z*GKCU!1aEQ:(9XS)0$a]M*idm[jJ.P_kLOg51p(%9Rn,$?L!Z/-^?\(:L8dq8Td.I-pmJ[&X#bW#g(7X81Jd,,VKfSWSE>l]M+!SJgWnU1(f[ASd<H]6qCDQ6pOcu^bOLU7u3LgOAu!C%87!W0;X"i<H'nq0`D;0JAKmp#J0H*d'&fbhML`?5KVT5/6LllDP)>n<aid)PLP7)Rj\iB2aNg6Kpg_&>N3):e@q:-6=)DokZlCa:%5djBLE(pKpPQ9F?$a(Y:VID?^g5bLFC</J8YUd`:UfNVsKCGl)U?JP3^V=cNB"I+IVl2VS5QGl_LE_[H!#Vku6tfFF<(0%Xg-C)&%rZX\aFpo&!N0K&,lB6=PPTb%l@CJt[*)e?IeD]j_p^j=B%A=4C6&LTQ&I8YU[TE_GAD<>>TYUaM]<f-V.'j@U'2d_"*+f+%mi#t.%U]AA%(qKb50kZ3FQ_cum;NoakQ8/*=e;O`#*0IpJ)<1q>-\qh#V2:f)/=4C2gK@"cEcQiP5TZSV(7Mi`L?4^EL$"J_OWfq3=@<#B%*1H(Q/pk0(jM:[J/gcsY1,W^c>V)+"BG.=tcR6Bk+DTXBC_W='AWCBV&h:PQUWhR0]#NG88O.9hP\TtiO"O7:R6V&3i/*=(-6g^N%=Pp'1q1IY[3&dLZ3MnD<*@NVbQB>^@,'KEkBc4k#Q7G,,V%>UjeR\[?AW2WEX.7oVX_gdpV8?+qrMn^0e\G@P^Pg*,204qVLh*0G%Lub9IMe08.ik(EVS;(:HE0_(M\=qTsX=C4u@B=91GgKtQUZb+l\X[O#BI`-%hCnsa1acc^/n_eJJh,AO>qWHSpf2VVGtSX=oWTZ!%,D.>>]#]\(VW;i]?\K]Hf&E0`rP\u>R#$Rf16+&<QZnCr+VK="6L!"hTq*SmJ=pK;ROC30dN"3hc'=e!-sW0NS&@%VG!j39nr2'W%QY.Q^YVLc1ls51>ZjdU5MMoglQd'df'aEVc-8Rsj9XY'lKJJ:dn1O#DCI7AP778!!!SRub-Gq/b,>i8n)Fj9iNQjdDN29A`?I'9F%hhGg0DFtNCFe[QG>_XU)\o#UYWaosHO;](t*h&n=%1=n(:,=/%(!7@h$h#k-(Re_e,+ufr36M/)hDO/E5QZh$bp"3]e<At5L&d7"%PN7H@XbdZ6p5KE>%iDEc^uU;=7hr1_,SL0_dgXO;$dXG(L8(3<b'_7Q(jiPI3>8.l>Xt>@]?M*FGnFDiiiaP`Rmp.f5bJ.s6_kI9%="Ik;'&I3UB*@:AK(DXN7%OaG1ps"CMs<anaqglV:h6>h[)aus?!U=h11\:>;ic:'!i?HI>>(Cl5T.FAe>'nXN,*gWgtF#rb7G<9%/X.-],<73[IfdS_1hT>'RW=gQL.BeU=!8dTLrrabO's5S_]<9]N:MSi.Us@Q!okg4&YY.,/A+UP`>]A7cg]l12F+ghB`QTR8;i]-%W1D?+3[-/>kG+tu&.&rq/X#'$A.oMQ8V"0AL<Lh*EAUCAUh);,&lDqU<!e_RacO;(>0`3PBpn=Z_$Yp,kTV9&P9J>$%Sc2/&gT&m%+VC8&br-k==scV*$DOdS[nb+W86G+qn.^C?dP;[QH./(SaK<oH):CgR]k0iG`6)VeK"i/NYd6)&;MFV!/r_2.P9H&9Og?(-F]LDB%/OiWPrfF_'&1PUN3$b-kE_(30b9-rnSj>sY4GRH"$O7AN(B55K$Q.54/sjA<NhpEp>]N@^QQ/h`9+K#(OopS^aW\3"E_'%[3@'qa%%OoOHLZEKt+[rs&[,c8L+=4SZOBaCuUaVQLP05/,']kKFEk17mU0M_0/sdPUPY2M.jcVugElfK8>]NA4/ib;!\R^eb>]N@fQQ/nf%9+K)*P!b+IM)SU@mYp$GWma?njYRVH5V<:bKm4Ih%GOnF#*`r4Oir_3l**"J\hDbuXK`p&3[[43>)F78crG8l)+=-,Q+ZFO7+bIn%='uW1j'Z!o3)s$b6qCu'l>mYAgI(FE3KkYGbVTWVj]"Tkhp"0c?B*gL<44a2KZsNOGa_(qW9&-Rd:^:U)hm]kdpT^"U)#*<DqogU%4bZrP,KFuS3O#t[m"L_0/AmTsMjWD+h6NP>HY+,!+%N-`&.7&Jl\-9Dd96AZ-t!n#gbi2t:q[")%"Mt4j@rR,D1s#8E)[IFEH7*$%i;bC+>>bR7\:`-K#pr4\?bFtkPprRRDZd@SULVT6qsUg<JO@$!*#M*WC#T.B(ri(<\5?1<a,kbo%1K"daUTIsP;_B5L-Ern6;H#>%`FdrAO_*a29j^n/'*[emc<u$Y2b+)E,%p'e=!37GabZ@$//U0X7'B8#-ua^[NRD3:[RRb=03WW\.VIFV*1`U/OKh5Pk`mU:"1Gg]%g;?cJb9Hm=D2jZWFl`NWdd'k.nI;3T(5lnb5cdnM$oDgEqk:O;B"P[R\=FGoI,u;C\D:as>PBh+JX<QoW$Lg8U8Xgr&CaPdH#O@_%DAnb)%Fak<R?c6Q79%&teT<HO+F2>P:bC6T\s8K"<ff/Nn0r&U;/r?3+@9fkmZ7a,-4I","UGjfEP/6[0b95Jj]DW5U?5^gYM5(2%!E!#7eP]t]&>UUb.<N&)mE2PeM=.N&kkb<rm;#oa4,u+H_=Jb?0*44OUsnegRnjYg5i?4+a(>E^$%k+9#\Go*4Pl(trUs60?$5R^%]UL$r5rs>[F1SF<jf5A]]9<S0_p:!)mF-WbpG!V3DRWq#1OX6g3=T2a--j_MMOL,D*d32[S;C;Rmao>/C,JGj#LemACi@mg$*PnO%g9@!%o`T2AECG[\B8pKKVcd4_a"p-<Y/?HZn_ARs2oDj:2q$,tnuVsNMJmi3.W=\J[:*Q"eJ%etfkj+sF7SU2WfD<c`oDrG)*H<[%\S^AEOAZ.u:p/L?@9Fi4(ro/:bWl3Q/q91&9b75$6EjZuF8H^]c!>Wo[L,[Q9tt(UoU31aG4"3RJrK<63!*B\jh(@[,n07cf>[=1%b"e>W0b'$DEuDW*U\"7a:ATp0fCQ.R03Q$cm?,@5qk[LOk<^tInD&t%Qcs/kbG.2D$n2>Tg,[^GHch9d[lsGsUpT"?*T7Z!1Xof-%08?H!L6?SjLFK,&qkFZMN$B<#U81:F3A<TR&frV\4S2<DgI\8h!;;"Z?(b?c;,_X]2/UTY0)Zih"Z$j&aj02R%'t3X9^WZ:'V#E5%=,hkb>F$u+I'C8,YqB@2W8,Yi*/:pNEg0FaQiOu+ee`14Efi$U3*Ft;!C!'C*&1C$5\99F9NfrOTV/(GBRoS,.W#dYU7*G^5"KE?%p'bG3oaGFs?LEd^^:-b+3O&XmN2><p_IXCnjTet_mue<+n;DE\\U?)aRjF>CdkHD"H[Y9uIGB7U(i7mBTD+ZiE:NcS2)MtJb]3B-%]o*,;YH)A0d-<)d6&3cnQaipQda2IbLG-;9PI31"s4?2#]kp_S/Hb:a?C,IK,VOHB](1sK5C&f4">&CoHX"ZdJT/d&2D7*o=%cM9%L`)@\3A&q`RULb?RW`3p;<>_*3JTjJrC_]Y>?A,c?NSe70G:IPpn-a6<j7%H7(2cLA>rq>G@r,)h8+4)s,eOn&cdr11=5JDM`B#?%lAXtI(-H/;##\`;pT'L\qI&P(3F_?ZbtHp&Z.];40llIOAJO%pq)9op4[OBr=nCUIk,b'sMWU;hF7B1Q<7"d@Gq?[aXLrW0Ltke?%YDpM:LM[2h7"!!h(O_ZCe'V!T6<(#66^k-R#AMUe<Cg'Bef`9iS.jG6K=_W^gHU&#]8#G5"5H$XAr2(--5Yo/n5K\k#eYRNd-1ef%S[mG=C1cdSQ?o1;3UqL)FJ&P(h:&125ZB+k#pGNOaPKg#EOA/W,7YiLH:&/Pf8.QRa&C]R+W'#1g$2Vb=mdnHHu\!5krEKD^crV6%9C43>NRr'ie=X8;=Bn_M=cl>'g!j&_3p&nJ#hVH_2Dpqf>=r_dD*(W9Z19L/!=TXO!@oLG3oH36M%]7Xc`G<,0$CV2%lbkiU;e$P%$4mCm=r&6C/?SY%!jI8`&5*=sh=@*oC6(+V+M1^3pIUeicB&-+&r(CAnf/1/C^dgb7Np"nV6&m-p,?"gm^+Vf$aUgq9/!:(D(?T'%H7mL?dIe0-!aIouma@4t7O&mLAQ!NV+q&L0G:9Vf8ulAk't1-$];_/o*/,hu6&<2i/PDOINcULjRUKV4h%4)QV;`,'+eINeS?fZD%&?f15(4;6XOF2!.QBYke7]K<:n9V2d-;hU#rd=d]Qb-2:,nX(E1d\J.\g5iJ_40!oQPQ<QV'sWi=QD6?f-8Xs^%kep1"In"(G?@V%#fRS2nTFEH=er;G_5bKd:L!Ip"B\^Z.=Xf,CeEVo^^$$u3?ta]36s#GXh&q&^?PMa+>"N^;$D*h9aJSnbiB.dTabf+08u]J&:jZE%r=7'*qpT4:K;r8T]!28*"$-Tq[12b]Ct)q.1ZOV9c^)"U+mPhiC`sd*/O&''d,l0t`psEi56!A^+=st:hLOG:%Ct[Hp@\)`\]7ih%XDqt@'t,hV,>/00faW*)_;?u;_'chD::Ahe1!^li<M0QZ(!p-C$N=c%Em'K.p$$,j>H.bVbgARVm",&H1i>r=?h]B,YfCMO%S27*%!PlhB!B%d:dU.mNC$IgGd5>aI^G'Hr$\=]!PkC4O*L<<t-VCOS6!qY.)6rBl^<u6iVG9/]_G_K_9(@mV=Ss`9L'-dFW-0&OD5iKh%%2V3%;hFLl=PBe2V7p)DpLp3i/./!1&OQkTBbW"#3pqT/gRd'=G*Irq!$>!=:#*q#2N>!0dotkqs"$/9!G`q.I!5q10g,4OS!El&%^hTLfM'</Zb,!(LQ?8U`kB%-4drYgO-,<Q*mLAWQoi[1DF_7"Gd=I/ho0OD/h3)0hT]#'lEO8tY%2QUB=Kk(V:!p1K@n!sSJ/FKH%Z0s:Qm&d8J=r1VY@[/q`kPg:!JhXC)T+LJSl;nb<*D(5Njc1<m?W5mD;Vi0`*:`7:H<]mKbL=kNJu0M!fkEpT4Y5UHe%,(jD@q$k%M-n82+h(ePEfQuI/s]TH$2J60.\?h&_6_j@FMhqX;0bd92q$#3M*7^uNP",[(Si;K[f,%1Gd_<=bt$F<Gs<b'q=`Jeo`?X)qp2^+%YF9J!YBJn&F6sLE[F"/MHXn[7%@/3j)%0i4fOTA1f"Pm*a7s<Q$/EZa27Ci"Y?,'I_M"_e[K.q8fEtH0Vk#P[_n.N:5V5W73-G7T%>feP>q,f4u=5?,\>\kgBXkmqi$qcoUYL5.._64gX!^IQ[:R:Lf2dVdNZ?82F^@hmA_<$7o'4Ld-XlU/G0F#fZV#.u#6^BtZgG*"d%#i.BV)II)_$s%3$Nc@4ZheEO_4]PJQPKs2*$%]S5D9.,-;^Z-Fa.X26NI0#Q.5,c8:(a"l1imaG:=n;VC7MM.lQ>#V/V9Lph$IK[%25CMH&9KI$b#.1#ckGMbpj*<#d?[=*_3LaF*B)ftS>;:l$Gi21@K!+Kb=p`+^WbTc7LcO_k\N[0KK,P&Q,C=7'$6u/Hnt`ZW3Qm>%oG+D@&JAop;XZ5=3(0s,!d/;uV)&*!]^6>4\g@7%RY'pcGuut!*.rHla::6567]G\2-0Ck)T)=e;1na1?;mDCl,(PG_J2inV0`]j%?K3fEZf^:Md]*=U)S$N9_Eu7=<d>O>Z(iWpQTH_R&Vn6Ufe6/^)bqt%)+CkJBGiMHf3kkJX/cNE7%H]aiF4Aog1k5;_l<B6eE8GO%Teea(er!IEXf^,2%C"ELAaGUG*Z)qaS1*Z"Kk@u1([</0qKDHKhT^XWVJR6)VJSuqV,e%+=M>n7J@"]-Ot'[\X[BmWBDC&b#MYhj%\nd@\e1L'XEjR8ga,mo8gPB!Vdh$A8ae:1l"A)cJdPs7THZsM!MQ;li8P2u_\*#'5X;-5h:aJZSfOho]8MerNo5:NJ*1`m<`[[E@%+`4aS?(XgHoaFVlN0umkfo6Rl8=HQ@+C%M2Nc?Df`p)^?i1o*H1+r"9">BGf9EW16VQ@AY0Bqs`S;ePfkuO#kk(O&llNtUj(4rmJ%U:@T5mEnpj`tl5@pdc^E5DJOUdT,?a@XW#L.a:kCYX4CJFC8\hURCV/7FeNfdP5"(/b^[&hB2,cK(prk5?N3(G,_GIF=g3j7ibLO%IT%?KEh!FQ^hpM%pDE+^>2R+ReJq#.]cml20'bFXE5"h4de6/h+W75M**Y$00#??j,n$MHdId(YK09`Mg-\M-N`@cZa'$Q-VCGHs%%F4IkA@(I8eKs33Hu%&5Z]8UK8?krfPD_+h\"5WR52I,hbLLqY[Dl$F`YtNoFUp-,NTLWnUM\Jj@U\k\.=e1^XS2t1M%rsW6>LaB%#kYISR$(jmCC#]oom2R)p1Pr0S:X*?9!^@C_Nn+70ZE_9IZ5$dYPX+ZV`K*,nJm4A%@IaG4;hYD(]ai^W%Q3tg)\@0k>O$Wb&40d%#F`bM-ULS[%;jcT>]mj77d$SK#84CR1MhKIiPGRa]R$ZB_sWi?/rVS_&fFk-9Tb`Ia"0&Ee'R<rHToJd=L^3^lW=g10=ONVH##2%%HMS/3Y=_5Nfms%&pO3o@H*EsrC+C<oR#Sj>H^$<D8FTn'8BmGt16mh97VF!%.99H!BH0/"HS%_YJQdJ#dHdJ^RW@?5Ago!.&Sc;&%'6Ggi@"@$P+I!V*"o8aKC8O.)U7Ou0^Co=+bq?p=&;G!2_Vh+lg%pK"k^)BFV&1"=,gE0jpF]+fF5^uK2HPF-DB3]7ElOAP+L%J8%3p&/Ma#mL"cD8Z@l,72F;.N.2D5$-,KhcMr"#e=,aZ,DJXQO>KXi)Z&?s\IO>0^,R5'nlkni<ebGu=bcg`@`A6YR%UqT<P$Ct_(&%K>;M\b@Wg`<AUG-/gC1k'JIg9A,0nC@SSu_ZSl]-$(Sj>'/L<n0hQ.t*$CiShSdr_4KD$o<69?XA3OW_E!bI.lE+d@&.YYdHb[HX%kHA*8WU!+Uj8uJaA"6<Le`HIPs4prA<Y*Qa(+*V3.O'OcbZ>>?jL$ee$(]r/@=(=\>B`MGVj)XhkV2RKJ*K(gN#S?RK9'6.)s5:u%U3X@DS1$*La_2>8_tP*UV>2X=TmRC`fR'WH)LinBJ*==>Eug(8b(]sh[+kR=<$MRgPuJ20Yd\iE`3tH:@#Xmpi-M8]#h;?iFsLEU%eZ%q<>h+po#p0)h#C8iNeQ9#K/7gMI+=lES1UW)"%8S&t[h\@EK\OHl%?(Qb5HY]4%7NfZ'qmPQ&(^k7:>WZd3l^qTl'P7%=Ds"e%CI1CL7_f^AY2T[af(IlU'KdV2AK?PHV\rn7rk"^cYF$W8^VKKLB!#p23(L_f!Dmm51Un1u/lt$5$I^[$]'ZahPue<a7\5ucE-Mb$%6YGKtViE,V@gJr#UEbt6j'4A_.M(/VB;]hkfIW;8mB,3jWg5n-2oU70.X>ms-5E[3CuZpH*?fK8IHN7eNAJEZd6FUO(jSP-JbprB%Z3a('[9'#sS*XBR#"#)Pm/3M6QU5nsp%39g,:]paq@LbDK:p.6%]8&[U"$m@*-`h/ECp3rbqcg<Pa=#A^(N3tf;J:Ef^d$eFU3\\%>:t/4FI$pn-tnL@`K];?*aRI!OI#B<aB`G;e.'$q3ZD&c-c<M295;5j\0Gn\=VQ,6d%m\Im'7TlW&sTHPGF4C.,1$jco";Y*Ckf"%Y)I.9&GJW?WS"ABDlOVM7h?+RT]3'J,9it2KrYn,i-KAJ#e1SLEn1DNk,%p\I691&dXi&b=NM]u_2/LnNg[-6jGj"W9$p(q4q9`L%d:IidIG0%/)f\$&[5^_#e9Q3M-)>0P`Nk7\Jpu_eN[g"lR\JiBNhpAT$=R[NFh#!cc=+I94kVTh9k1rJrPlNL53V@"/B(QA2i!U_%`J^)fiGA9AmTek*ARcCRMk`*tQ>Y$i_H^O34?CtDI_*V<*KQ46Lt_R(Lq%VQ\@EDj>.KcJ.?8Wk2hX=I4_3Qf>24SReN)(7?@7;T%N^^Tt8goD8fj:j])"QI_4Z`P[pgqW)^j>mp(4$cGks-BK=^m?Ufu@f9YTr<\EW32E,VdER`O6.g<3*MGV/b_eSc*<BRZppTW.S*n%mHpj9R:B<uWfn_pg0(G%DXfk4qO6OiI.bQS9OLM4TZ,$CUe(ug7]$'Ba>J.h1L\'Y]1W6P#)UY644I=G4W=UtX8&85-\VY2aUL79%DGY<l<;&,>s64m`^Z=W@M@'gu[3piDZHZd,PqRr6-@sYi&Qb2WS)Ir>%NJl8C1(3`*A2gNPb=scc8Y:8-$\7;n<-f,VU0$g0?H9L%MNME>c4Yn6YJaR+Z'tSAjXN@"L%2u8<p`72eLo;S_X?D$GG+:8#\8/pU`)MD9R<uR3SKeoC`.:BKl+'<b*s_\!aMtJ+`H2J,a_](%Pp81['Kt)nh,LIVpll;f$FM;OU@Cr;3,`Z)qito)[AX-m!69,U1P,=!O/4Zq)q+"Loa0Lti&Cr!(co+4E<2WN5ui9;=a#YB"'g4K%S7jY=s1k"EBHAo]/1g-O>8k\t)#1Nr@N1>WVN;D)(&*7e?&6K#iE"S__R+$XJCD-ao\:S]KQ@<k<Xfe'iBEhJDBl'L]uf/CM:-9#%6HtAtXMY$fejS`=DrPW(L]XM0m&AnP!DAuafV>5,!>L(\0mONt!t<LfMun++e)0Om+-J`6FpHduc<^fVRGah%3]k?H"52!?c,@ia%I\rMQ!$\-PrO*%dU6,JSo.=r22'WjV80fjA/*Sb-g"<4kB;gB?`g0N!RhQp1kVF1jfJkQo_hpe7R9=k*?sV3/AH>)QZs0p=Lded%%.UNN!:7DO*N6/d;eD@]Id!4jbItLN7!H,se<e8<s_5L"]H\$g%.Or[M^k)7hj<GWm&o2GDF?P]-ErY;0HbptdTn^hEE5rQ%I$)*=%qL[oG;;dI"/h?&/DoAt:1lLFH;4VMkX:\P"r(OHK$3^QC5t'`]$_Ks:$a#lgX9ca7H6Nbo9i=tV(+VLJ=d!V%L5IaO_(Aa5mQ8KL%1m!TX#^g*(3*U?1<Dbc=Cqmd&a?%.g0p!nWjOl%"PORq%1SV^BYWKhgY4[\%F,&hs*Ue9&c(-kmi@(H-GB%F@_OT8bH'p_W:N:"!%`E]s&?t)QjN?_:kQj3B\E,,V?]98<M-*]O;e^CWaqc](uY&7R?'T"MZ,=[MX>B5Cml#Ik;U<9o3S@X"]F&upn[XdtSZj]tNf5>Sg%QD0qg)-4^&AC>K"It_b-\.(r.]qUaTEGAW204"nL2;MWgMhZ'=9fUsF-h1+lO`Jj<:ge*31/X=>VIa(8)t>FRQ=&5@$EgSpA9kO-%q).?=AWp7Mg_j15L:m:iKf41aQq.6+:Q&!fekQZ6M^`9H'2QF#!.b65[%;e_AYjI/46Lm62S#]>BA.A4U^">%`tBcf9q'.gkR$)(%KdR=t(]Tc30DO&Epc**We6b`Tl%q%;U+J6^Sk6!6C5a.sOX.b9:J*_s+la3Ng!fTV!oeg4rF[E?6f@5S5+A30=*U#`DK#m-$=KZW%A!6:68Pb-5cYu![k&2qJLmnLLeG7niS_O^$<qKp:X;iN(41N0@pntNBrpAccJ7inD(sZq=nl$];$]\sJPCVUuKMG,?[l*qWDmE8'%RrXZM(k+6ESKi#b\j6SHN2?uWn4[REGUD3^WD`c4RF)]PnI/WUE@gReE1mj$=QajAoZUV)7TYml0>KW*B?7%g^0;I0o2TQFQZ'^X%Y@\.7G'@%?SHlrSO_q"HF0;F.'4j_5E8s>PE>7o:ULS%cN`=WMZRNd:cpNqTX4,hn<Bq@t't?sMCV-?t/eDJJ/J)A'5s'tZV=Kb&%Ks+baQV$@OUCtrLZ88.j*"#dKq[-\p2W^t!$8upJI[2tPXb\!cdP9Zig:(Di2s]C7L&2a&\"7PjgC&p*Ka`"K!%J<R$l&q1JmEVS%'Y.*dimb`sp:8.;j`_L;GrB72V#:q9DXq'"rTAQA)@+nDS0L`\T#]#L#,beRR:KW''W<PP"ra'tTBV<pMn'm%I)&3-qjH:(6#[M%%BO+Pt&AV0P\ejP8HfBkI!Ah=e(e(8R/)*o8Bt.0Soe%/eVmRUt]j"VRKldM(3c]e3Lf)BjiI8=q*#[2E%#9UN[%+5'K8t^,aoVRj%PFg^#>\Jq[D2I5.jSQ.p3dM_%,h+&_23(6qUFEP&dCoq2+SE_9WHUX6RJ?kGP?ef_Lu&XK0ABWKWp2Ihh.r**V7h,,Oof+U.]*dm%olCrtST%>l8:e#\)!CV_6JC?8%020X'<fO(7b\OB*9iI7(!)oji4di'X75<fCr?t$,KrNO)Um,kZ)=BL!<b.9TD44]`4aC[=f'Z^%Jetu9(P)f2Q-;XVI&5"4d8Wr!='SJNkINA.hG'[$TP8/SRlZ*ChY<1]b#Jpl:D?`hAIc8W;>jEPC60rEpao)E97As"B^'n&l,Be<%m62qJ^clJA$#;(`%AH`rJT;Jtff6,s-ak(<`Lo/QNj<#nTBG[3N=S3l5V-uFf:k0u93-FtT1)qA(lERo]$@(I/>o;hg1@u[^1F`V%7O4)=7?<1p]13\ULZCfEjj\EDGpCAOcPQiGRa@)o6M`8QBTqul^*#J`Uji[QOoB(?,ll=Hi7YCQ$VH%.YC<JLck0'@J)TBK<!n/J%:A<q/-TtY$`Mp\?\<fcb-Rsrf0;F,TeWDF;B!k`0a`f0A_0+<DFhO$;b\M&g+:Y!hH</&!C=%it>;&Gk+:^Xf=).Dt9pBX-ksj!"%]rFVo\nLRB3oa&D&RGW1,q$lF'ak@''omBnEc:&+>9f(`2pp\8#'A/MVe6ZQhTgU-d:Bi#@=NK6cr:VORY%m4]3%@q`iP/gp`rl]%16nE7B#M9o5PL$Z2!FGE_=tNmiW3,RG6<=b]n(c"?k7K(D$YJaQcE!R!5;)Hc0soj>b:@a$nCFbN.\_jL,`RTor@W=[T]N(#F_p4%V8&kQ6%#t2)b\H\"<YZiS#"2peA[4IBKQAgg:P1iJJ3E3UQqXgIr%ALNQ&6CJJC0lfpQmt4&"$n2cs>D&\5+IfF1B(&'_"%=6@[[%"MRfk\2D"UJM+h$T8EW[Sk+i`,aJLIC\e=fULoDR6ko2Y:=A6h\Q>+6P!T<faD@WF#=&]aMtKJ$OQY?4'fH%"ak1ej)P'(N*PjkI%n5`@(M7m47XD$d"etULt&?t>\j#6u+3rddNJm'$.LX2@8M5FdSSGhGMW^VQ[A6WiV.>W+qZ/Zppk<l%,"6FkZQs6;R,At]BLj([/%qM`&ri)ibJdudaL7q8OV'0-#EXH-"@1m1:i5&mGC,K>EA,\=N$)5m"d"_FY=&Mo#k@dm%`/'*Jp@XqZ%<INZrZ$`ar.(2=(bn=oa%p8n#FpgT48g7@jKQcUD4^Iu&O6Vu:/`KlWBr!M#LYUVS?K`*]!YSTf(C'O<.6/<\!NF(u"'49_7O#RfB7ViW]O3Vm:RbiOa"kF@#%f[VR;l[Xl8J`DIj8aq#(aqH,?1TE!^RUI/,GF;2%+gAK2HWLe$H$""hK)WTM'lch#AOQZ+aILQ#-hma1"B<d(b4B?l:NN8'NXu\K%Hr022`RIkWZr[]DOKSWDIGc'FH3PjMOUG1EUu#Pjm^qBlUMu1Ve)kB<Gq%^]&>s&;BVS[]<<riD5Bi%G[o:X\-D2F`QU'$)oai=4%B=tHO[lk9nm#<ZSd6*AVV\%lb6Qb<K3p.J(`*uZb'`Xk?%8C*@QfrnC65*FQhk/*%@4V5oRWVkoYn9eceSWGHi:EnV:ne%a:DD05%"?p)Z"4+2(5&00W\XB"9p[!c)7b?1(9BAK-V,^He]]40NHsMeY##=pO[KN[_K0fY'"Z7PS!(cCT:T8"+1HDqg:a=MEDgIQudlW_.%H5k$6KR3o$(PY=I(\9J3_O`*is"+g,kuf2\_,-5u2R+VD_\sa<9bYnt[6!WY[(DH`T`Ti9.=VIFRrrsW:48i&gB7^o'SMPn'14Bt%?2Qe\&C5K3N#\ZecMC5<<g%V]Wa9"P',?^U"JT:+5tA.'P;/J;Y]*"sT9i>Kg#"$KA6XDcM8ig<r2aD?&S<\EbiH*Gile;lKKc3)%#=.kV'.]uPFqc2EFU'k5U]dDt:_+.O_M5cbjsS/?!)3Qm(?CM\5l]$(hIFH-QB`cVWnFVghA*]rZ1uJK3@p5hoGO@hZ@!:fO-'"@%7#*5l5m$Q!K".YZ%C;^dem1:)3`+SAW(eVN1-5YSPEFIZK>Jm;;S/^bPuLt$%-eVsr--X#_R$1tFK/7oM!)o`-[a<Q!NP0B;Y!sr%r#O328a_:Z5%*3cEo\bLilem"[O7j3Hc%TL8R)6UG8Qb;Of3]Rat\uu*ra*JKBW[%'J]A6bC0%f?l8fiSd&bEoF8ObQ.Brt9k9.G%bqU>m0!XKRaLG-o:fj"@kJ_YP8HjrUIUQ>%SQ'j@`^oMm1]f*O]\0^Am=[U'c]Us,RsK>$PW_8o,44neOa>f"@Vti("1%2>/2Tf(%_mpi;-T?CrC/m0:V89,=DmfJ";7CM@S,U>\+?LstkO_\=ZifbFWg(JW8,5n^SJ)jFZ=V6nH!N&LEt78]_kfkoPG=h'M%@>_5`4ts%4!5/Z;$@p>mp8\[Uo_bGTCfoIS2bld-HdWG2,`[4p\6[(6T'#q`".[rW9iPMj2K\0?&P%d`6@D>8=_D>To2NJ'=;,O=faVm^]\DM%hhKZh2?k(gDs769H.h)3SL&,d`qu]aa7Fc4r\h_'A3i$:ooY+%0(!.40#j;S3M356b9$1sAI<ad>Qcc_+^-@r#_L[RL=GB@g-jEM%<)Ck.+<&Q%;XO_.l2f1>Z5\:i`%(V>>%Ld4/H%<k_i@WgR,$FMNn6fU9VS"9kIT)Im$nMRZ*u8^mmU;tRm;tkFeX^J+tGI#N9],6%(5LY<I@%"S\>mpbb/4[N"T*FMdRm*"SJ%ht]e%]WnQL]FC=:Pl\P0MWp1+tpiLhQ,`+#Bd`4;lMQ)Hp+ImkJR\]8MOh4PF$PsX2R%?"l?/WZbcgEaG=n'GKZ7Vb7PKUQd4HbebDYmS:>rU.$JpZVk>.:f!f@'s(LfE71aSeini.G@CqHO<.<HG/P^)]AT^5:&5Q;S)te*%o;sDG(RUFDi:;C??/'O.7HcdqaquH*Ai-iY*b%;i<a^D7BQRf/>31@7P?E5G]=qloC)gGGeJZMGEF+e8G:ndd5FI7@B.o7NLjnUR%<uII6l;E.9Eq?4L2gUQ9``m;!PU6M]_mQ0lHVG!`R3:t$4CBI2@K'6gL;->A?HtdoYB&2nCFnGJW$RBmQ`o8?GCgD9Z1Y/"#\7_f%MPtSGnXA/c36Qru2`9F6E@B$o\l=EEN`#he[IrTD0U(/u).&Kd;<IZ1;8>Bm1ahGP\kAS05XT:Va&$$,DpOI75V!\4>uk)jg2lL*%GT+aOMC/il:81s>g/?EnM,=79'$69&F`St\QU;mgT:G^L*!55@@S0UuXhi\@+\faEhVI,LiaJl_QoUrCcA%_b4uu#M\!7X0"\L[)%TRS5RU7Qaqg%\BX,md)H,0aJ]PR-HITMj,#-7B8iAtasGl,_ABUGGB"g12)m:nK4'.qq'OTqsR_VogU1:8JH$G>tSX6P-5E.?#A0%(2YG36dJ*==5pL+fft8#O)%dqf*Q5YRehce-\#4#59p;C'#o'#[5$,q&hQNg9bQ)GPFNKLbg3LD3g#^h!c_Kud<#/J<VAq4bka/J%2WbBc,LNOEJ]C@ZM-QA,5bI9OC-fC"l,AdhPT@+p6SYZRK$(Ylq_2L9A"$>>\XN>i"$hq:_?(1[g=m6"6]q-KUO/CCK<e%/M)TC_%5c"B<:G!n-'URU8,CGFeLWu0b^.)A8K8eG=,^<pCKng;f*FqFdQUb"(1FjhaX\D+`@n'5/KeF)H)BX\WeLk*^<WUDe>uf&0mufm;%9qD.e,Z^a]X$2o5<c*dC-c0sl[O*R+Ut+U5!eMZ'*05%me#C&HG,=rs6Bp:"ksf108ci,J"MeQ'Z$UD\4T3'GkdoJR7oQCW_$D]9%rp5.mH^j'#bVDKjR^o[<XJEC1Wp@ZAW<>tWJJIlanbhTo=:5/,%fC(L)]3ipA`s8tTC/KG%HhPu2O^2qONtu*mF0-X>E*nGXs96f%U7;i"*R4$$Y6Oe,9)j:Q@[>uKB:.$L>ck+&Zs2?cdABl]"fh+L$7sE3YGSt^DTrPclju*0UaI[bYc1u0g/<7R.<3#E$d;8XC<<9"%eQ)''-s(E1ZfkI`On`eek[^b8A)Y$l'DV%e$%I^Lp&<Rhes+o9X6iah90%39A?=>a)(S'59qd5+4b1GPCU)shRTI6CGA`VBC3c14%B=G,-[TrM.-6tA_:`uq=.3d#1k#3,_D_!?8`<(gb2=_e)+'25p5K,p$Z]m(uh(`(!FP(se>_^X]@S`CVcbE`ube#SMi]US]Ji[U@%d1WjAjsdaY6..DSkHGO0Z8-bjPW<G=1U0Aj$>Z\Ucr[ZK"\M<_:X\&2"Ora%>#Wg+j;qY2L:WW#WV'F,0$(2n5gUDSHI<n9(jkjr%!ps^$HB(kt)r#KQS\cqfHY..Rp`4oPc4nOZ"ZK(o_frnH!1Gq!$d_2I@\\mJ^&6X_b`7l)h!!Z-W&&U6h)s8K[eR"tV$:\\GIfYQ%_@pm*?&@a,.qn0#O,#FlE6d=1?+.apYDY#08@E]o,\Pf9=4K`G=3js0k+F5\>0.B4H3k>Nr/S>N"29_&$\B$l/ClUp`JqAeWpS@q%@p7l"TJe>i:Md>#o38/V0gncKa2[g4$Wuck!cT*k"?59Ge3)U:eDsRk9Ui=/cK8A>A\>idQnjMgHOhXc*2#%1ft-p;T+BmKYe3X"%N1C9BJ?:(JrtGXCjYtEjc;(7@%B!R%>RSF^>_4st9>W9P34;JLo'q],=L7Z*Y9U,qe$Bl27Gr4&UVogW`j1<f"nnL@Om;lQWVs48%kT'L:<dPCAI_i[hM(-a/R_i'hP&;dYl)Z%W^XVr\h/.-oSa)=kM9ar01WN**3HB)K`G]BZ&ob+]/I^,@AsO$@%W)&hDXDEY]TZj;%ZIIg7_DaoK<e8E]?]Z#/-/R:OQ;[+VQ=G[mP1mFVGgL.sN)V$4KEUfX0cWXZ@g146BF\@*l_X^Y&+)l.!CO_,E(\n]j8Gb>$4WZE%l(rCHDI#c)[u_Y9O9n+KWacprlQ!gOkdbnX-MM=&'CJ8-?HFT'QQhhWS`W#-(hU3G#qpHk%#)m+U/+-Egl7NZ,&H=L9HqcB`#$!=%WmTr/5:^%3]-p?SXW2D(ck9dZk`pTu&@4V07nkp;\p.I>CkbpriLS$SA7eTj'-HSs>oYZ[3T))QJhdR*=hQ(hgK6s=;?LeOR?XnE%Kh=)W38StH],QtK^RZqh[T3m6qB6q^,2b6cRCAR&+j\kFm^`Y>]TpAdj(o]T#%BqX^M5_VJ/Q2MhEYU_1ZrAE!M&aA:<Ul$YnEKX%T(_+fPbMeGPONV(eZt^?,P)N&Z:;TCL$2WXkmTb^Sp]YtS7BgFO2>*@'jY]"7FH_15YkE3M+m9(=\;dNaiRe16hNG"7Vgj*M9Xm;%1as1F("6RPAl$1O^$\R$3AZSSIej+aK#.l^'bo4]Uk;ZVGJP_!"l8,;'CdLQSWsJj<Dm)ONNN*JW`#^9:.@(KYTjtJP(^(5qUF6$%\ms\KpjbBr"%FE]p\$caWI<BD/P7$OVHNg4mJ@6F*9Jd(^$(l<+\^>S1'*:92%qu_hLg7JK5Q[ed54"s`]5;GjE&,oT`Q.L%BE,E%E+$UnLkD%K#E,26n'oYqq$S<=_t2!Q29M?oR7pmo0ed<]gh@<3#i7Eq2IKB)Y-'h<D!9S1Yo*[(HTI*1EpN+!B;pPaet0WONZ*%6%a7K$ccRi?,T>/\Ph`0?tT=n$\,]Q-<$h)Q?lTal&*M4&NSrZ\<d't&6+8gMsW"@jaX6]+OaR\N_1JYmaLSH@kqP4U-OrQY8*])1b%+KU?W>=,f/3ik4'1eB[%.)fBeUoua6cZCruP/7Y7=<;4;+Tth;c9gldg=thM[\nC\:0cRq:;G;-(\bIh*INal,gJmtN$*R"`0'!L%,l_ekBE"\2:'<pZ#k4R/51EFaP)=V.b:6OU6cPO#>Y#$"X$(._1So%/-=;bhN<)@2gqrbIoC,1$4G`<JKP0qA91^\m)L^lP\3oa$%*/s?PF.R8`+#b6=`Uko02m<'H_<Y,TZe6JqH,Z?C-Qe.rijTr>cUE:9-Vf_[T"#dE[B)X@L$WoK:AU>%<n$-MrH)edXE!\]aLe,O%W,^p-;jBTKgWUWC;%Csn9,>-4X^0ZH@Hc(.aPf#H$s$MRVWTg%:%'Ku'X*-fGri2V9i0._p&N"&0A.QY5E,/$AYqR@=dJiVS"EFc%(N>G2-I4HA.,uLElf+4aI?/NK8AK4&#4$];UHF.UJ<hMr4hK7Tpuc74'`MdlP=QfDNB1h`mS[_@=-GKc0JFqRc=qThV^i9<\EYgV%X&I\RK(t#_pqho\b_(s2LhrX/BhaX?G@:X/A?D7m>#nn2m)J$U(TDgI+,aX',i$>C-l)?@"idgG-hLnGooh2s!\ElhHAKW6E`#JK%OPNe7B@!lt%OS4mM<J3"@O:2IP:e!l.0j]EEmlJDjbkb-'8]b],(DpE@ap\h!Sii`8&0?odT@fNRCbHA`ohrb:Ft%1SnPfZ;jmBJ%r&WGuXZeO;^(QgH=-?.FI177&Hh1_\$;5/SadJcg!UBRBVA:=f3<D?Z/+3:Z%#5-<;VXCL_f-7c,:f*b]$&R(`MVsg7V=;R@W8U%%/D&hbZ%?@8k$3o.E0//IMm=e`X2QJGq##h[W1j$$BIn9,d@?mhH8RO'Sr#nNB9:iL#5:pt,UQqE."V<GB,&@+\HlV5l?0,)#:$Y?%if-o[b(U:_F=qS@\;uqQKSQkiCDRI%OaI-eK$^!YiZ&Z\Ys2kIF`*M-7N#lA,F!P].n>@:)4[pSA8q%['FT-6kdkD%B5@F$gDHVu%Ih[F5J?]4%,+T371Q1M5S!UncrQF*rq;lr$qj2fK&bIK%iLC/>K`@[rlOPXq(48ldSZ_\F"fM&kj/"hWmENgt4M:9]UcmbPIG]hO%XHfX#TmdY6-2\.#j.+\hGV@3pQZEBKb"6VdW1?RQ;mskkjK>_/%eeKJS_q0??SC2g\ATV?GWGL=;8]590?Q4@@>F6;H@dUGh(inl%hKOGG`gq[>c)4[N%km+W4e-%-Vnun=CnhYT00?Pgr_@t?hS&CUp'i%s-mu4X/<W>,ac0*`FZ1/q4M&a,6VHaMrK[BO]mJH.jVthU%8<5?5@F7B:3'OUjrBX0'q8Z?hE]hG=4*T\X]^5Rec&;6<(-*0F4d&@qi!TDpFm?S2Zd["@hq=ElkB6LIrJ`i!GTPQ#o79Xlj0P:q%&Hc5U8/n(]5R1"_7b[QKB7l;Zb^PCO8?Z4/(*DT5iLD0Gj1R!*P)]2q/PK(8o4L]lJ9A'%T<bE*Hq[VUN[h?o@rcOeft,QQ3!Mj)%\G_urp:YsJrKb&r$(TuX1:m,s?a2teWnqN'#G9t"-efYiklGVP_-WSrT&5_(s8M,\J,SNa:S7[dVa#S.l/U*.5Q0^:^[=TO$o$XP%dVjU3md9o'?[_hMHN!i\+$Y5Nr;,6i5QCZ!T3d$EduXP&q:DhMAcHbfZ!AL3^\GjaqtN\\dmOMo?[M6[hYf*QmB:KZ(B4'of5KMn%rq+[c5JI-^]C3K4_]SmUiO9mn^Vt0f%l5<:r`?i6h8dj65CVP*rk&./QhC3U?bcU3s*4A%g[A);h7J1:]OuZ+Ie/VmhS&gbcTcg4%In9V5p;=N2J,\E_^[o4Tq>Bd3?hE7UmcC:ZrjVk$HN!"K?M]0HIHg9Ms64ah?gq@_(OT<_"lIjZ_0>QZn6P&jI+S9"hmIpLGGQ\0%s.=eos',)EoA.SkhgXJ^ocJY^iAY]To'Xuarp@m1?iAI.+5d%be(^MO^\dZoj.G3-mrtsRJ,U=7i8#LLIsM"_e%7j3\%[4fe%^>/%5BsJ`U4<0m=9%dIs7,4N![J.4Zi~>%AI9_PrivateDataEnd